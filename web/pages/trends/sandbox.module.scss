@use "sass:color";
@use "styles/vars" as v;

.page {
  @include v.component-wrapper;
  display: flex;
  flex-direction: column;
  gap: v.$space-lg;
  padding: v.$space-md v.$space-lg v.$space-xl;
  color: v.$text-primary;
  background: linear-gradient(
    180deg,
    color.adjust(v.$background-dark, $lightness: -1%),
    color.adjust(v.$background-dark, $lightness: 2%)
  );
}

.header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: v.$space-sm;

  h1 {
    font-family: v.$font-family-accent, sans-serif;
    font-size: v.$font-size-xl;
    font-weight: 900;
    color: v.$color-white;
    letter-spacing: 0.08em;
    text-transform: uppercase;
    margin: 0;
  }
}

.resetButton {
  @include v.button-style;
  background-color: transparent;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  padding: v.$space-xs v.$space-md;
  font-size: v.$font-size-xs;
  border-radius: v.$border-radius-sm;
  letter-spacing: 0.08em;
  text-transform: uppercase;
  &:hover:not(:disabled) {
    color: v.$color-white;
    border-color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.15);
  }
}

.controls {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: v.$space-md;
  @include v.glass-panel;
  padding: v.$space-md;
}

.controlGroup {
  display: flex;
  flex-direction: column;
  gap: v.$space-xs;
  position: relative;

  label,
  span {
    font-size: v.$font-size-xs;
    font-weight: 700;
    color: v.$text-secondary;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  input,
  select {
    background: v.$background-dark;
    border: 1px solid v.$border-secondary;
    border-radius: v.$border-radius-sm;
    color: v.$text-primary;
    padding: v.$space-sm v.$space-sm;
    font-size: v.$font-size-sm;
    outline: none;
    transition:
      border 150ms ease,
      box-shadow 150ms ease;

    &:focus {
      border-color: v.$primary-color;
      box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.2);
    }
  }
}

.inlineLabel {
  display: inline-flex;
  align-items: center;
  gap: v.$space-xs;
}

.status {
  font-size: v.$font-size-xs;
  color: v.$text-secondary;
}

.playerResults {
  list-style: none;
  margin: v.$space-xxs 0 0;
  padding: v.$space-xxs;
  border-radius: v.$border-radius-sm;
  border: 1px solid v.$border-secondary;
  background: color.change(v.$background-dark, $alpha: 0.98);
  max-height: 12rem;
  overflow-y: auto;
  box-shadow: 0 16px 32px rgba(0, 0, 0, 0.45);
  @include v.custom-scrollbar(v.$primary-color, v.$background-medium, 6px);

  li + li {
    margin-top: v.$space-xxs;
  }

  button {
    width: 100%;
    border: none;
    background: transparent;
    color: v.$text-primary;
    padding: v.$space-xs v.$space-sm;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: v.$border-radius-sm;
    font-size: v.$font-size-sm;
    transition:
      background 120ms ease,
      color 120ms ease;

    &:hover {
      background: rgba(v.$primary-color, 0.16);
      color: v.$color-white;
    }
  }
}

.positionTag {
  font-size: v.$font-size-xxs;
  font-weight: 800;
  color: v.$text-secondary;
}

.windowButtons {
  display: flex;
  gap: v.$space-xs;
  flex-wrap: wrap;
}

.windowButton,
.windowButtonActive {
  border: 1px solid v.$border-secondary;
  background: color.change(v.$background-dark, $alpha: 0.6);
  color: v.$text-secondary;
  font-size: v.$font-size-xs;
  padding: v.$space-xxs v.$space-sm;
  border-radius: 999px;
  transition: all 150ms ease;
}

.windowButtonActive {
  border-color: v.$primary-color;
  color: v.$color-white;
  background: rgba(v.$primary-color, 0.2);
}

.summary {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: v.$space-md;
  @include v.glass-panel;
  padding: v.$space-md;

  div {
    display: flex;
    flex-direction: column;
    gap: v.$space-xxs;

    strong {
      font-size: v.$font-size-xxs;
      color: v.$text-secondary;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    span {
      font-size: v.$font-size-md;
      font-weight: 700;
      color: v.$text-primary;
    }
  }
}

.error {
  font-size: v.$font-size-sm;
  color: #f87171; // keep safe explicit error color
}

.chartSection {
  background: color.change(v.$background-medium, $alpha: 0.6);
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-lg;
  padding: v.$space-md;
}

.chartPlaceholder {
  display: grid;
  place-items: center;
  min-height: 320px;
  color: v.$text-secondary;
  border: 1px dashed v.$border-secondary;
  border-radius: v.$border-radius-md;
}

.chartWrapper {
  display: flex;
  flex-direction: column;
  gap: v.$space-sm;
}

.chartMeta {
  display: flex;
  align-items: baseline;
  justify-content: space-between;
  gap: v.$space-sm;

  h2 {
    font-family: v.$font-family-accent, sans-serif;
    font-size: v.$font-size-lg;
    font-weight: 800;
    letter-spacing: 0.05em;
    margin: 0;
    color: v.$color-white;
  }

  span {
    font-size: v.$font-size-xs;
    color: v.$text-secondary;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
}

.chartSvg {
  width: 100%;
  height: auto;
}

.chartWrapper :global(.x-axis text),
.chartWrapper :global(.y-axis text) {
  fill: v.$text-secondary;
  font-size: v.$font-size-xs;
}

.chartWrapper :global(.x-axis path),
.chartWrapper :global(.x-axis line),
.chartWrapper :global(.y-axis path),
.chartWrapper :global(.y-axis line) {
  stroke: rgba(148, 163, 184, 0.35);
}

.chartWrapper :global(.rolling-line.focus-line) {
  stroke: color.adjust(v.$warning-color, $lightness: 5%);
}

.chartWrapper :global(.rolling-line.context-line) {
  stroke: rgba(v.$warning-color, 0.6);
}

.chartWrapper :global(.baseline-line) {
  stroke: rgba(148, 163, 184, 0.5);
}

.chartWrapper :global(.streak-marker) {
  pointer-events: none;
}

.chartWrapper :global(.zoom-pane) {
  cursor: grab;
}

.chartWrapper :global(.zoom-pane:active) {
  cursor: grabbing;
}

.chartWrapper :global(.brush .selection) {
  fill: rgba(v.$primary-color, 0.15);
  stroke: rgba(v.$primary-color, 0.5);
}

.chartWrapper :global(.brush .overlay) {
  cursor: crosshair;
}
