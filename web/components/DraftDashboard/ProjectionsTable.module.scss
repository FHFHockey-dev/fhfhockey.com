// components/DraftDashboard/ProjectionsTable.module.scss
@use "sass:color";
@use "styles/vars" as v;

/* =================== Projections Container =================== */
.projectionsContainer {
  display: flex;
  flex-direction: column;
  height: 100%;
  max-height: 810px; /* Ensure it respects parent height */
  overflow: hidden;
  background-color: v.$background-medium;
}

.panelHeader {
  background-color: color.adjust(v.$background-dark, $lightness: -3%);
  border-bottom: 2px solid v.$border-secondary;
  padding: v.$space-md v.$space-lg;
  display: grid;
  grid-template-columns: 1fr auto auto; // title | actions | info
  align-items: start;
  column-gap: v.$space-lg;
  row-gap: 0;
  flex-shrink: 0;
}

.controlsBarTitle {
  font-size: v.$font-size-md;
  font-weight: 700;
  color: v.$text-primary;
  padding: 0;
  line-height: 1.1;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  flex-direction: row;
  width: 100%;
  height: 100%;
  border-bottom: 1px solid v.$border-secondary;
}

.settingsAndTooltips {
  display: flex;
  align-items: center;
  gap: v.$space-sm;
  justify-content: flex-end;
  margin: v.$space-md;
}

.panelTitle {
  font-family: v.$font-family-accent, sans-serif;
  font-size: v.$font-size-lg;
  font-weight: 700;
  color: v.$color-white;
  letter-spacing: 0.08em;
  text-transform: uppercase;
  text-align: left;
  width: 100%;
  margin: v.$space-md;
  line-height: 1.1;
}
.panelTitleAccent {
  color: v.$primary-color;
}

/* New condensed controls bar */
.controlsBar {
  background-color: color.adjust(v.$background-dark, $lightness: -2%);
  border-bottom: 2px solid v.$border-secondary;
  display: flex;
  flex-direction: column;
  align-items: center;
  // padding: 0px v.$space-md 6px;
  min-height: 48px;
}
.primaryControls {
  display: flex;
  align-items: end;
  flex-wrap: nowrap;
  width: 100%;
  height: 100%;
  gap: v.$space-md;
  flex: 1 1 auto;
  min-width: 0;
  padding: v.$space-sm v.$space-md;
  overflow-x: auto;
}
.inlineControl {
  flex: 0 0 auto;
  display: flex;
  align-items: center;
}
.inlineSelect {
  background: v.$background-dark;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  padding: 4px 8px;
  font-size: v.$font-size-xs;
  min-height: 28px;
  width: 100%;
}

.stackedControlsRow {
  display: flex;
  align-items: end;
  flex-wrap: nowrap;
  gap: v.$space-md;
  width: 100%;
}

/* Compact toggle buttons for header controls */
.toggleButtonsGroup {
  display: inline-flex;
  gap: 6px;
  width: 100%;
}

/* Compare selection checkbox styling */
.compareCheckbox {
  appearance: none;
  -webkit-appearance: none;
  width: 18px;
  height: 18px;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  background: v.$background-dark;
  display: inline-grid;
  place-content: center;
  cursor: pointer;
  transition:
    box-shadow 0.15s ease,
    border-color 0.15s ease,
    background-color 0.15s ease;

  &:hover {
    border-color: v.$primary-color;
  }
  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.35);
    border-color: v.$primary-color;
  }
  &::after {
    content: "";
    width: 6px;
    height: 10px;
    transform: rotate(45deg) scale(0);
    border-right: 2px solid v.$color-white;
    border-bottom: 2px solid v.$color-white;
    transition: transform 0.12s ease-in-out;
  }
  &:checked {
    background: v.$primary-color;
    border-color: v.$primary-color;
  }
  &:checked::after {
    transform: rotate(45deg) scale(1);
  }
}
.controlToggleBtn {
  background: v.$background-dark;
  border: 1px solid v.$border-secondary;
  color: v.$text-secondary;
  border-radius: v.$border-radius-sm;
  padding: 6px 8px;
  font-size: v.$font-size-xxs;
  font-weight: 700;
  letter-spacing: 0.06em;
  text-transform: uppercase;
  cursor: pointer;
  min-height: 28px;
  transition: all 0.15s ease;
  flex: 1 1 0;
  &:hover,
  &:focus {
    outline: none;
    border-color: v.$primary-color;
    color: v.$text-primary;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.25);
  }
  .controlToggleBtnActive,
  .controlToggleBtn:focus-visible {
    border-color: v.$focus-color !important;
    background: rgba(v.$focus-color, 0.4) !important;
    color: v.$color-white !important;
  }
}
.controlToggleBtnActive {
  background: v.$primary-color-opaque;
  border-color: v.$primary-color;
  color: v.$color-white;
}
.inlineToggle {
  display: flex;
  align-items: center;
}
.settingsButton {
  background: linear-gradient(135deg, v.$primary-color, v.$secondary-color);
  color: v.$color-white;
  border: none;
  border-radius: v.$border-radius-sm;
  padding: 6px 12px;
  font-size: v.$font-size-xs;
  font-weight: 600;
  cursor: pointer;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  display: inline-flex;
  align-items: center;
  gap: 6px;
  transition: all 0.2s ease;
  &:hover {
    box-shadow: 0 4px 10px rgba(v.$primary-color, 0.35);
    transform: translateY(-1px);
  }
}

/* Stacked (label-above) control layout to reduce horizontal width and wrapping */
.stackedControl {
  display: flex;
  flex-direction: column;
  gap: 2px;
  align-items: stretch;
  min-width: 0;
  flex: 1 1 0; /* equalize widths across row */
}
.controlLabelMini {
  font-size: v.$font-size-xxs;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.06em;
  text-align: center;
  color: v.$text-secondary;
  line-height: 1;
  white-space: nowrap;
  display: block;
  width: 100%;
}
.searchStack {
  flex: 1 1 auto;
  min-width: 240px;
  width: 50%;
  .controlLabelMini {
    text-align: left;
    white-space: normal;
  }
}
.searchInput {
  min-height: 28px;
  padding: 4px 8px;
  width: 100%;
}
.toggle .toggleText {
  font-size: v.$font-size-xxs;
}

/* Mini Run Forecast */
.miniRunForecast {
  display: flex;
  flex-direction: column; // was row wrap
  align-items: stretch;
  gap: 8px;
  padding: 4px v.$space-md 8px v.$space-md;
  background: color.adjust(v.$background-dark, $lightness: -6%);
  border-bottom: 1px solid v.$border-secondary;
  flex-wrap: wrap;
  align-items: center;
}
.miniRunDescriptor {
  font-size: v.$font-size-xxs;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.06em;
  color: v.$text-secondary;
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding-right: 0;
  border-right: 0;
  margin-right: 0;
  width: 100%;
  margin-bottom: 4px;
  line-height: 1;
}
.miniRunItems {
  // new wrapper for items row
  display: flex;
  gap: 8px;
  width: 100%;
}
.miniRunItem {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: v.$font-size-xxs;
  color: v.$text-secondary;
  min-width: 0;
  flex: 1 1 0;
}
.miniRunLabel {
  font-weight: 700;
  color: v.$text-primary;
}
.miniRunBar {
  position: relative;
  flex: 1 1 60px;
  height: 6px;
  background: v.$background-medium;
  border: 1px solid v.$border-secondary;
  border-radius: 4px;
  overflow: hidden;
}
.miniRunFill {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 0%;
  background: linear-gradient(90deg, v.$primary-color, v.$secondary-color);
  transition: width 240ms ease-in-out;
}
.miniRunVal {
  font-variant-numeric: tabular-nums;
  color: v.$text-primary;
}

/* Settings drawer */
.drawerOverlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.5);
  z-index: 200;
}
.settingsDrawer {
  position: fixed;
  top: 0;
  right: 0;
  height: 100vh;
  width: min(380px, 92vw);
  background: color.adjust(v.$background-dark, $lightness: -2%);
  border-left: 1px solid v.$border-secondary;
  box-shadow: -4px 0 18px rgba(0, 0, 0, 0.5);
  z-index: 210;
  display: flex;
  flex-direction: column;
  animation: drawerSlide 300ms ease;
}
@keyframes drawerSlide {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}
.drawerHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: v.$space-md v.$space-lg;
  border-bottom: 2px solid v.$border-secondary;
  h3 {
    margin: 0;
    font-size: v.$font-size-md;
    color: v.$text-primary;
  }
}
.drawerClose {
  background: transparent;
  border: 1px solid v.$border-secondary;
  color: v.$text-primary;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  cursor: pointer;
  font-size: 18px;
  line-height: 1;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  &:hover {
    color: v.$primary-color;
    border-color: v.$primary-color;
  }
}
.drawerContent {
  flex: 1;
  overflow-y: auto;
  padding: v.$space-md v.$space-lg;
  @include v.custom-scrollbar(v.$primary-color, v.$background-medium);
  display: flex;
  flex-direction: column;
  gap: v.$space-lg;
}
.drawerSection {
  background: color.adjust(v.$background-medium, $lightness: -2%);
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-md;
  padding: v.$space-md;
  h4 {
    margin: 0 0 v.$space-sm 0;
    font-size: v.$font-size-sm;
    color: v.$primary-color;
    text-transform: uppercase;
    letter-spacing: 0.08em;
  }
}
.drawerSelect {
  width: 100%;
  background: v.$background-dark;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  padding: 6px 8px;
  font-size: v.$font-size-sm;
}
.sliderRow {
  display: flex;
  align-items: center;
  gap: v.$space-sm;
}
.sliderLabel {
  font-size: v.$font-size-xs;
  color: v.$text-secondary;
  white-space: nowrap;
}
.baselineList {
  margin: 0;
  padding-left: v.$space-md;
  font-size: v.$font-size-xs;
  display: flex;
  flex-direction: column;
  gap: 2px;
}
.drawerNote {
  font-size: v.$font-size-xs;
  color: v.$text-secondary;
  margin: 0;
}

/* Screenreader only */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  white-space: nowrap;
  border: 0;
}

/* Mobile adjustments */
@media (max-width: v.$breakpoint-tablet) {
  .primaryControls {
    flex-wrap: wrap;
    align-items: flex-start;
  }
  .miniRunForecast {
    padding-left: v.$space-sm;
    padding-right: v.$space-sm;
  }
  .settingsButton {
    padding: 6px 10px;
  }
  .inlineSelect {
    font-size: v.$font-size-xxs;
  }
}

@media (max-width: v.$breakpoint-mobile-max) {
  .controlsBar {
    flex-wrap: wrap;
    align-items: flex-start;
  }
  .panelTitle {
    flex: 1 0 100%;
  }
  .miniRunForecast {
    align-items: stretch;
    gap: 6px;
  }
  .miniRunItems {
    gap: 6px;
  }
  .miniRunItem {
    min-width: 70px;
  }
  .miniRunDescriptor {
    width: 100%;
    border-right: 0;
    margin: 0 0 2px 0;
    padding: 0;
  }
  .controlsBar {
    align-items: flex-start;
  }
}

/* =================== Filters Section =================== */
.filtersSection {
  display: flex;
  gap: v.$space-md;
  padding: v.$space-md;
  background-color: color.adjust(v.$background-medium, $lightness: -1%);
  border-bottom: 1px solid v.$border-secondary;
  flex-shrink: 0;
  /* NEW: allow controls to stay on one line and forecast to span below */
  flex-wrap: wrap;
  align-items: flex-start;
}

.searchContainer {
  flex: 1 1 420px; // grow, prefer wider search
}

.searchInput {
  width: 100%;
  background-color: v.$background-dark;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  font-size: v.$font-size-sm;

  &:focus {
    outline: none;
    border-color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.2);
  }

  &::placeholder {
    color: v.$text-secondary;
  }
}

.positionFilter {
  min-width: 150px;
  flex: 0 0 200px; // keep select compact on the right
}

.positionSelect {
  width: 100%;
  background-color: v.$background-dark;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  padding: v.$space-sm;
  font-size: v.$font-size-sm;

  &:focus {
    outline: none;
    border-color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.2);
  }

  option {
    background-color: v.$background-dark;
    color: v.$text-primary;
  }
}

/* NEW: full-width run forecast strip under filters */
.runForecastWide {
  flex: 1 0 100%;
  margin-top: v.$space-sm;
}

/* =================== Table Container with Scroll =================== */
.tableContainer {
  flex: 1;
  min-height: 0; /* Allow flex item to shrink below content size */
  overflow-y: auto;
  overflow-x: hidden;
  background-color: v.$background-dark;
  @include v.custom-scrollbar(v.$primary-color, v.$background-medium);
  border: 1px solid v.$border-secondary; /* Add border to contain */
}

.playersTable {
  width: 100%;
  border-collapse: collapse;
  font-size: v.$font-size-sm;
  table-layout: fixed; // Enforce column widths and consistent layout
}

.playersTable thead {
  position: sticky;
  top: 0;
  z-index: 5;
  background-color: color.adjust(v.$background-dark, $lightness: -5%);
}

.playersTable th {
  background-color: color.adjust(v.$background-dark, $lightness: -5%);
  color: v.$text-primary;
  padding: v.$space-sm v.$space-sm;
  text-align: left;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  border-bottom: 2px solid v.$border-secondary;
  font-size: v.$font-size-xs;
}

/* Make sortable headers look clickable and provide hover affordance */
.sortableHeader {
  cursor: pointer;
  user-select: none;
}
.sortableHeader:hover {
  color: v.$primary-color;
}

.playersTable th.colFP,
.playersTable th.colVorp,
.playersTable th.colAdp,
.playersTable th.colNextPick {
  text-align: left;
}

/* Compare column (moved to far right) */
.colCompare {
  width: 52px; /* fixed to prevent checkbox clipping */
  min-width: 48px;
  text-align: center;
}

/* Strengthen value band backgrounds so zebra striping never masks them */
.valueBand.valueSuccess,
.valueBand.valueWarning,
.valueBand.valueDanger {
  background-clip: padding-box;
  /* Ensure they win over row zebra backgrounds */
  position: relative;
  z-index: 1;
}

/* Compare launch button visual affinity with compare checkboxes */
.compareLaunchButton {
  border: 1px solid v.$focus-color;
  background: rgba(v.$focus-color, 0.4);
  color: v.$color-white;
  box-shadow: 0 0 0 1px rgba(v.$focus-color, 0.25);
  &:disabled {
    opacity: 0.55;
    filter: grayscale(15%);
  }
}

/* Updated compare checkbox styling for right-most column */
.compareCheckbox {
  appearance: none;
  -webkit-appearance: none;
  width: 18px;
  height: 18px;
  border: 1px solid v.$focus-color;
  border-radius: v.$border-radius-sm;
  background: rgba(v.$focus-color, 0.15);
  display: inline-grid;
  place-content: center;
  cursor: pointer;
  transition:
    background 0.15s ease,
    box-shadow 0.15s ease,
    border-color 0.15s ease;
  position: relative;
}
.compareCheckbox:hover {
  background: rgba(v.$focus-color, 0.25);
}
.compareCheckbox:focus-visible {
  outline: 2px solid v.$focus-color;
  outline-offset: 2px;
}
.compareCheckbox:checked {
  background: rgba(v.$focus-color, 0.55);
  box-shadow: 0 0 0 2px rgba(v.$focus-color, 0.35);
}
.compareCheckbox::after {
  content: "";
  width: 10px;
  height: 10px;
  border-radius: 2px;
  background: v.$focus-color;
  opacity: 0;
  transform: scale(0.6);
  transition: all 0.15s ease;
}
.compareCheckbox:checked::after {
  opacity: 1;
  transform: scale(1);
  background: v.$color-white;
}

/* Right-most compare column cell centering */
.compareCell {
  text-align: center;
  padding: 0;
}

.playersTable td {
  padding: v.$space-sm v.$space-sm; // Increase vertical spacing for legibility
  color: v.$text-primary;
  border-bottom: 1px solid v.$border-secondary;
  font-size: v.$font-size-xs;
  vertical-align: middle;
  text-align: left;
  line-height: 1.4; // Improve readability
}

/* Expanded details row styling */
.expandRow td {
  background-color: color.adjust(v.$background-dark, $lightness: -6%);
  border-top: 1px solid v.$border-secondary;
  border-bottom: 1px solid v.$border-secondary;
  padding-top: v.$space-sm;
  padding-bottom: v.$space-sm;
}

/* =================== Value Bands (VBD & Proj FP) =================== */
.valueBand {
  /* Dark text to create transparent effect over tinted background */
  color: v.$background-dark;
  font-weight: 700;
  border: 1px solid transparent; /* set by variant */
  border-radius: 4px;
}
.valueSuccess {
  background-color: rgba(v.$success-color, 0.5);
  border-color: v.$success-color;
}
.valueWarning {
  background-color: rgba(v.$warning-color, 0.5);
  border-color: v.$warning-color;
}
.valueDanger {
  background-color: rgba(v.$danger-color, 0.5);
  border-color: v.$danger-color;
}

/* Ensure numeric alignment remains right for these cells */
.valueNumeric {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

/* When value band applied to fantasy points, override default green text */
.valueBand.fantasyPoints {
  color: v.$background-dark;
}

/* Header controls for scope toggle */
.scopeToggle {
  display: inline-flex;
  gap: 4px;
  align-items: center;
}
.scopeSelect {
  background-color: v.$background-dark;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  padding: 4px 6px;
  font-size: v.$font-size-xs;
}

/* Column sizing to avoid overflow - now responsive with percentages */
.colName {
  width: 20%; // reduced to free space for ADP & Next-Pick
}
.colFav {
  width: 4%;
}
.colPos {
  width: 7%;
}
.colTeam {
  width: 7%;
}
.colStat {
  width: 3%;
}
.colFP {
  width: 12%; // slightly increased
}
.colVorp {
  width: 9%; // slightly reduced (applies to VORP, VONA, VBD)
  // x 3
}
.colAdp {
  width: 9%; // increased; benefits ADP and Next-Pick
}
.colNextPick {
  width: 12%; // new: explicit width for Next-Pick %
}
.colAction {
  width: 15%; // tightened to free space
}

/* Zebra striping for better row separation - Fixed to target actual row classes */
.playerRow:nth-child(odd) {
  background-color: color.adjust(v.$background-dark, $lightness: -2%);
}
.playerRow:nth-child(even) {
  background-color: color.adjust(v.$background-dark, $lightness: -5%);
}

/* Drafted rows appear greyed out but remain visible */
.draftedRow {
  opacity: 0.5;
  filter: grayscale(60%);
}

/* Ensure hover still stands out over zebra stripes */
.playerRow:hover {
  background-color: color.adjust(v.$background-dark, $lightness: 2%) !important;
}

/* Favorited row highlight */
.favoritedRow td {
  background-color: v.$primary-color-opaque !important;
}
.favoritedRow {
  box-shadow: inset 0 0 0 2px v.$primary-color;
}

/* =================== Table Cell Styles =================== */
.playerName {
  min-width: 140px; // was 165px; allow narrower name column
  width: 100%; /* Let the column definition drive layout */
}

.nameContainer {
  display: inline-flex; // was flex; switch to inline-flex to fit content
  flex-direction: row; // was column; keep items inline
  align-items: center;
  gap: 6px;
  overflow: hidden;
  padding: 0;
  width: 100%;
  min-height: 1.5em; // keep minimum line height only
}

.expandToggle {
  flex: 0 0 auto;
  width: 20px;
  height: 20px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  border: 1px solid v.$border-secondary;
  background: transparent;
  color: v.$text-primary;
  font-weight: 800;
  line-height: 1;
  cursor: pointer;
  padding: 0;
  transition: all 0.15s ease;

  &:hover,
  &:focus {
    outline: none;
    border-color: v.$primary-color;
    color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.25);
  }
}

.fullName {
  font-weight: 600;
  color: v.$primary-color !important; /* Force color to ensure visibility */
  font-size: v.$font-size-sm;
  margin: 0;
  padding: 0; /* Ensure no padding */
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: block; /* Ensure block display */
  line-height: 1.3; /* Consistent line height */
  flex: 1 1 auto; // allow truncation to use remaining space
}

.favoriteButton {
  background: transparent;
  border: none;
  color: v.$text-secondary;
  cursor: pointer;
  font-size: 16px;
  line-height: 1;
  padding: 0;
  transition: color 0.15s ease;
  &:hover,
  &:focus {
    color: v.$primary-color;
    outline: none;
  }
}
.favorited {
  color: v.$warning-color;
}

.statSortSelect {
  background: v.$background-dark;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  padding: 4px 8px;
  font-size: v.$font-size-xxs;
  min-height: 28px;
}

.iconButton {
  width: 28px;
  height: 28px;
  border-radius: 4px;
  border: 1px solid v.$border-secondary;
  background: v.$background-dark;
  color: v.$text-primary;
  font-size: 12px;
  font-weight: 700;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0;
  line-height: 1;
  transition: all 0.15s ease;
  &:hover,
  &:focus {
    outline: none;
    border-color: v.$primary-color;
    color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.25);
  }
}

/* Dynamic stat view helpers */
.statHeader {
  text-align: right;
}
.statCol {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

/* Favorited row highlight */
.favoritedRow td {
  background-color: v.$primary-color-opaque !important;
}
.favoritedRow {
  box-shadow: inset 0 0 0 2px v.$primary-color;
}

.position {
  color: v.$text-secondary;
  font-size: v.$font-size-xs;
  font-weight: 600;
  text-transform: uppercase;
  min-width: 60px;
}

.team {
  color: v.$text-secondary;
  font-size: v.$font-size-xs;
  font-weight: 600;
  text-transform: uppercase;
  overflow: hidden;
  text-overflow: ellipsis;
}

.fantasyPoints,
.vorp,
.adp {
  font-variant-numeric: tabular-nums;
}

/* Stat mode numeric columns */
.statHeader {
  text-align: right;
}
.statCol {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

.fantasyPoints {
  color: v.$primary-color;
  font-weight: 700;
  text-align: right;
  min-width: 70px;
}

.adp {
  color: v.$text-secondary;
  text-align: right;
  min-width: 60px;
}

/* New: Next-Pick (%) cell style */
.nextPick {
  color: v.$text-secondary;
  text-align: right;
  min-width: 60px;
  font-variant-numeric: tabular-nums;
}

/* Risk level background cues (probability player is GONE before next pick) */
.riskLow {
  /* low risk player will be gone => safer (green) */
  background: rgba(v.$success-color, 0.3);
  color: v.$text-primary;
}
.riskMed {
  background: rgba(v.$warning-color, 0.3);
  color: v.$text-primary;
}
.riskHigh {
  /* high risk of being gone => urgent (red) */
  background: rgba(v.$danger-color, 0.3);
  color: v.$text-primary;
}

/* Numeric alignment for VORP column cells */
.vorp {
  text-align: right;
  color: v.$text-primary;
  font-weight: 700;
}

.actionCell {
  min-width: 80px;
  text-align: center;
}

.draftButton {
  background: linear-gradient(
    135deg,
    v.$primary-color 0%,
    v.$secondary-color 100%
  );
  color: v.$color-white;
  border: none;
  padding: v.$space-xs v.$space-md;
  border-radius: v.$border-radius-sm;
  font-size: v.$font-size-xs;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  cursor: pointer;
  transition: all 0.2s ease;

  &:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(v.$primary-color, 0.3);
  }

  &:disabled {
    background: v.$color-grey-medium;
    cursor: not-allowed;
    opacity: 0.6;
    transform: none;
    box-shadow: none;
  }
}

/* =================== Position Run Forecast =================== */
.runForecast {
  display: flex;
  flex-direction: column;
  gap: 4px;
  padding: 6px 8px;
  background-color: color.adjust(v.$background-dark, $lightness: -4%);
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  min-width: 220px;
}
.runTitle {
  font-size: v.$font-size-xxs;
  color: v.$text-secondary;
  text-transform: uppercase;
  letter-spacing: 0.06em;
  font-weight: 700;
}
.runBars {
  display: flex;
  flex-direction: row; /* was column */
  gap: 8px;
  align-items: flex-end;
  justify-content: space-between;
}
.runRow {
  display: grid; /* switch from column flex to grid */
  grid-template-columns: auto 1fr; /* pill | count (right-aligned in the free space) */
  grid-template-rows: auto auto; /* header row + bar row */
  grid-template-areas:
    "pill count"
    "bar  bar";
  align-items: center;
  column-gap: 6px;
  row-gap: 4px;
  flex: 1 1 0;
  min-width: 0;
}
.runPosPill {
  grid-area: pill;
  justify-self: start;
  background: color.adjust(v.$warning-color, $lightness: -15%);
  color: v.$color-white;
  padding: 2px 6px;
  border-radius: v.$border-radius-sm;
  font-size: v.$font-size-xxs;
  font-weight: 800;
  min-width: 28px;
  text-align: center;
}
.runBar {
  grid-area: bar;
  width: 100%;
  height: 8px;
  background-color: v.$background-medium;
  border-radius: 4px;
  overflow: hidden;
  border: 1px solid v.$border-secondary;
}
.runBarFill {
  height: 100%;
  width: 0%; /* will be overridden inline */
  background: linear-gradient(
    90deg,
    v.$primary-color 0%,
    v.$secondary-color 100%
  );
  border-radius: 4px 0 0 4px; /* keep left corners rounded */
  transition: width 240ms ease-in-out;
}
.runCount {
  grid-area: count;
  justify-self: end;
  font-size: v.$font-size-xxs;
  color: v.$text-primary;
  font-variant-numeric: tabular-nums;
  min-width: 30px;
  text-align: right;
}

/* =================== Loading and Error States =================== */
.loadingState {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: v.$space-xl;
  color: v.$text-secondary;
  font-style: italic;
  height: 400px;
}

.loadingSpinner {
  width: 40px;
  height: 40px;
  border: 4px solid v.$border-secondary;
  border-top: 4px solid v.$primary-color;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: v.$space-md;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.errorState {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: v.$space-xl;
  background-color: rgba(v.$danger-color, 0.1);
  border: 1px solid rgba(v.$danger-color, 0.3);
  border-radius: v.$border-radius-md;
  color: v.$danger-color;
  text-align: center;
  margin: v.$space-md;
}

.emptyState {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: v.$space-xl;
  color: v.$text-secondary;
  font-style: italic;
  text-align: center;
}

/* =================== Legend Tooltip Fix =================== */
.infoTooltip {
  position: relative;
  display: inline-flex;
  align-items: center;
}
.infoButton {
  width: 22px;
  height: 22px;
  border-radius: 4px;
  border: 1px solid v.$border-secondary;
  background: v.$background-dark;
  color: v.$text-primary;
  font-size: 12px;
  font-weight: 700;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0;
  line-height: 1;
  transition: all 0.15s ease;
  &:hover,
  &:focus {
    outline: none;
    border-color: v.$primary-color;
    color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.25);
  }
}
.tooltipContent {
  position: absolute;
  top: 100%;
  right: 0;
  margin-top: 6px;
  background: color.adjust(v.$background-dark, $lightness: -2%);
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  padding: v.$space-sm v.$space-md;
  width: 240px;
  box-shadow: 0 6px 18px -4px rgba(0, 0, 0, 0.55);
  z-index: 50;
  display: none;
}
.infoTooltip:hover .tooltipContent,
.infoTooltip:focus-within .tooltipContent {
  display: block;
}
.tooltipTitle {
  font-size: v.$font-size-xs;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.06em;
  margin: 0 0 v.$space-xs 0;
  color: v.$primary-color;
}
.tooltipBody {
  font-size: v.$font-size-xxs;
  line-height: 1.3;
  color: v.$text-secondary;
}
.tooltipBody ul {
  list-style: disc;
  margin: 0 0 v.$space-xs 1.1em;
  padding: 0;
}
.tooltipBody li {
  margin: 0 0 4px 0;
}
.tooltipBody li:last-child {
  margin-bottom: 0;
}

/* Reduce any accidental global list spacing inside header */
.controlsBar ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

/* =================== Responsive Design =================== */
@media (max-width: v.$breakpoint-tablet) {
  .filtersSection {
    flex-direction: column;
    gap: v.$space-sm;
  }
  .searchContainer {
    flex: 1 1 auto;
  }
  .positionFilter {
    flex: 1 1 auto;
  }

  .tableContainer {
    height: 600px; /* Reduced height for mobile */
  }

  .playersTable th,
  .playersTable td {
    padding: v.$space-xs v.$space-sm;
  }

  /* Rebalance columns for smaller viewports - totals ≈ 100% */
  .colName {
    width: 32%; // decreased from 44% to make room for favorites
  }
  .colFav {
    width: 6%;
  }
  .colStat {
    width: 4%;
  }
  .colPos {
    width: 7%;
  }
  .colTeam {
    width: 5%;
  }
  .colFP {
    width: 10%; // up from 9%
  }
  .colVorp {
    width: 6%; // down from 7% (3x = 18%)
  }
  .colAdp {
    width: 8%; // up from 5% (2x = 16%)
  }
  .colNextPick {
    width: 8%; // match ADP at this breakpoint
  }
  .colAction {
    width: 8%; // down from 9%
  }

  .playerName {
    min-width: 130px; // was 150px
  }

  .fullName {
    font-size: v.$font-size-xs;
  }

  .headerActions {
    width: 100%;
    justify-content: space-between;
  }

  .headerActions {
    gap: v.$space-xs;
  }
  .compactSelect {
    max-width: 140px;
  }
  .rangeInput {
    width: 100px;
  }
  .toggleText {
    display: none;
  } // icons only to save space
}

@media (max-width: v.$breakpoint-mobile-max) {
  .panelHeader {
    flex-direction: column;
    gap: v.$space-sm;
    text-align: center;
  }

  .tableContainer {
    height: 500px; /* Further reduced height for mobile */
  }

  .playersTable {
    font-size: v.$font-size-xs;
  }

  /* Slightly more room for ADP/Risk on very small screens - totals ≈ 100% */
  .colName {
    width: 36%; // down from 50%, leave room for favs
  }
  .colFav {
    width: 8%;
  }
  .colStat {
    width: 5%;
  }
  .colPos {
    width: 7%;
  }
  .colTeam {
    width: 5%;
  }
  .colFP {
    width: 10%;
  }
  .colVorp {
    width: 5%; // down from 6% (3x = 15%)
  }
  .colAdp {
    width: 7%; // up from 4% (2x = 14%)
  }
  .colNextPick {
    width: 8%; // ensure readability of percentage label
  }
  .colAction {
    width: 6%;
  }

  .draftButton {
    padding: v.$space-xxs v.$space-xs;
    font-size: 10px;
  }

  .headerActions {
    flex-direction: row;
    gap: v.$space-sm;
  }

  .compactSelect {
    max-width: 120px;
  }
  .rangeInput {
    width: 90px;
  }

  .tooltipContent {
    right: 50%;
    transform: translate(50%, 6px);
  }

  .infoTooltip:hover .tooltipContent,
  .infoTooltip:focus-within .tooltipContent {
    transform: translate(50%, 0);
  }
}
