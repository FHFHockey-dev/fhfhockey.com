// components/DraftDashboard/DraftSettings.module.scss
@use "sass:color";
@use "styles/vars" as v;

/* =================== Settings Container =================== */
.settingsContainer {
  width: 100%;
  color: v.$text-primary;
  border: 2px solid v.$border-secondary;
  padding: 16px 24px;
  border-radius: v.$border-radius-lg;

  @include v.glass-panel(
    $padding: v.$space-md v.$space-lg,
    $radius: v.$radius-lg
  );
  width: 100%;
  color: v.$text-primary;
  display: flex;
  flex-direction: column;
  gap: v.$space-sm;
}

.settingsHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: v.$space-sm; // Reduced from v.$space-lg
  padding-bottom: v.$space-sm; // Reduced from v.$space-md
  border-bottom: 2px solid v.$border-secondary;
}

.title {
  font-family: v.$font-family-accent, sans-serif;
  font-size: clamp(1.25rem, 1.8vw, 2rem);
  font-weight: 900;
  color: v.$color-white;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  margin: 0;
}

.titleAccent {
  color: v.$primary-color;
}

/* Header right-side actions cluster */
.headerActions {
  display: flex;
  align-items: center;
  gap: v.$space-sm;
}

/* =================== Draft Type Toggle =================== */
.draftTypeToggle {
  display: flex;
  background-color: v.$background-dark;
  border-radius: v.$border-radius-md;
  padding: v.$space-xs;
  border: 1px solid v.$border-secondary;
}

.toggleButton {
  @include v.button-style;
  background-color: transparent;
  color: v.$text-secondary;
  border: none;
  padding: v.$space-xs v.$space-md;
  font-family: v.$font-family-accent, sans-serif;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  border-radius: v.$border-radius-sm;
  transition: all 0.2s ease;

  &:hover {
    color: v.$primary-color;
    background-color: color.adjust(v.$primary-color, $alpha: -0.9);
  }

  &.active {
    background-color: v.$primary-color-opaque;
    border: 2px solid v.$primary-color;
    color: v.$secondary-color;

    &:hover {
      background-color: color.adjust(v.$primary-color, $lightness: -5%);
    }
  }
}

/* Summary button next to toggle */
.summaryButton {
  @include v.button-style;
  padding: v.$space-xs v.$space-sm;
  font-size: v.$font-size-xs;
  background-color: transparent;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;

  &:hover:not(:disabled) {
    background-color: color.adjust(v.$secondary-color, $alpha: -0.85);
    border-color: v.$secondary-color;
    color: v.$secondary-color;
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

/* Tiny collapse chevron button */
.collapseButton {
  @include v.reset-button;
  width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  border-radius: v.$border-radius-sm;
  border: 1px solid v.$border-secondary;
  color: v.$text-secondary;
  background: v.$background-dark;

  &:hover {
    color: v.$primary-color;
    border-color: v.$primary-color;
    background: color.adjust(v.$primary-color, $alpha: -0.95);
  }
}

/* =================== Settings Grid =================== */
.settingsGrid {
  display: grid;
  grid-template-columns: repeat(
    auto-fit,
    minmax(260px, 1fr)
  ); // responsive min width columns
  gap: v.$space-md;
}

.settingsGroup {
  background-color: color.adjust(v.$background-dark, $lightness: -2%);
  border-radius: v.$border-radius-sm; // Smaller radius
  padding: v.$space-sm v.$space-md; // Reduced padding
  border: 1px solid v.$border-secondary;
}

.groupTitle {
  font-family: v.$font-family-accent, sans-serif;
  font-size: v.$font-size-sm; // Reduced from v.$font-size-md
  font-weight: 700;
  color: v.$color-white;
  letter-spacing: 0.08em;
  text-transform: uppercase;
  margin: 0 0 v.$space-sm 0; // Reduced margin
  padding-bottom: v.$space-xs;
  border-bottom: 1px solid v.$border-secondary;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* =================== Form Elements =================== */
.settingRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: v.$space-sm; // Reduced from v.$space-md

  &:last-child {
    margin-bottom: 0;
  }
}

.label {
  font-size: v.$font-size-sm;
  font-weight: 500;
  color: v.$text-primary;
  min-width: 80px;
}

.select {
  background-color: v.$background-dark;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-sm;
  padding: v.$space-xs v.$space-sm;
  font-size: v.$font-size-sm;
  min-width: 120px;

  &:focus {
    outline: none;
    border-color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.2);
  }

  option {
    background-color: v.$background-dark;
    color: v.$text-primary;
  }
}

/* =================== Roster Configuration =================== */
.rosterGrid {
  display: grid;
  grid-template-columns: repeat(
    3,
    1fr
  ); // More compact - 3 columns instead of auto-fit
  gap: v.$space-xs; // Reduced gap
  margin-bottom: v.$space-sm;
}

.rosterSetting {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: v.$space-xs;
}

.positionLabel {
  font-size: v.$font-size-xs;
  font-weight: 600;
  color: v.$text-secondary;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.numberInput {
  background-color: color.adjust(v.$primary-color, $alpha: -0.6);
  color: v.$text-primary;
  border-top: 2px solid v.$primary-color;
  border-bottom: 2px solid v.$primary-color;
  padding: v.$space-xxs;
  height: 30px;
  font-size: v.$font-size-sm; // Smaller font
  text-align: center;
  width: 40px; // Smaller width
  border-right: none;
  border-left: none;

  &:focus {
    outline: none;
    border-color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.2);
  }

  // Remove spinner arrows
  &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  &[type="number"] {
    appearance: textfield; // standard property for compatibility
    -moz-appearance: textfield;
  }
}

/* Error pulse for required numeric inputs (e.g., keeper round/pick) */
@keyframes errorPulse {
  0% {
    box-shadow: 0 0 0 0 rgba(v.$danger-color, 0.6);
  }
  70% {
    box-shadow: 0 0 0 6px rgba(v.$danger-color, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(v.$danger-color, 0);
  }
}

.inputErrorPulse {
  border-top-color: v.$danger-color !important;
  border-bottom-color: v.$danger-color !important;
  animation: errorPulse 0.9s ease;
}

.rosterTotal {
  font-size: v.$font-size-xs;
  color: v.$primary-color;
  font-weight: 600;
  padding: v.$space-xxs v.$space-xs;
  background-color: color.adjust(v.$primary-color, $alpha: -0.9);
  border-radius: v.$border-radius-sm;
  border: 1px solid color.adjust(v.$primary-color, $alpha: -0.7);
  text-transform: none;
  letter-spacing: normal;
}

.rosterTotalWarning {
  border-color: v.$warning-color;
  background-color: color.adjust(v.$warning-color, $alpha: -0.85);
  color: v.$warning-color;
}

.rosterStepper {
  display: flex;
  align-items: center;
  max-width: 300px;
}

@keyframes groupErrorPulse {
  0% {
    box-shadow: 0 0 0 0 rgba(v.$danger-color, 0.6);
  }
  70% {
    box-shadow: 0 0 0 6px rgba(v.$danger-color, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(v.$danger-color, 0);
  }
}

.rosterStepperError {
  animation: groupErrorPulse 0.9s ease;
  border-radius: v.$border-radius-md;
  box-shadow: 0 0 0 2px rgba(v.$danger-color, 0.4);
}

.rosterStepperError .stepButton {
  border-color: v.$danger-color !important;
  animation: groupErrorPulse 0.9s ease;
  box-shadow: 0 0 8px -1px v.$danger-color;
  background: color.adjust(v.$danger-color, $alpha: -0.85) !important;
  color: v.$danger-color !important;
}

.rosterStepperError .numberInput {
  border-top-color: v.$danger-color !important;
  border-bottom-color: v.$danger-color !important;
  box-shadow: 0 0 8px -1px v.$danger-color;
  background-color: rgba(v.$danger-color, 0.4);
}

/* Subtle branded link used for projection sources plug */
.sourcePlug {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 6px;
  margin-top: v.$space-md;
  padding: 4px 8px;
  font-size: v.$font-size-xxs;
  color: v.$primary-color;
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-md;
  background: linear-gradient(
    135deg,
    color.adjust(v.$primary-color, $alpha: -0.92),
    color.adjust(v.$secondary-color, $alpha: -0.94)
  );
}
.sourcePlug a {
  color: inherit;
  text-decoration: none;
  border-bottom: 1px dotted v.$primary-color;
}
.sourcePlug a:hover {
  color: color.adjust(v.$primary-color, $lightness: 10%);
  border-bottom-color: color.adjust(v.$primary-color, $lightness: 10%);
}

.stepButton {
  @include v.reset-button;
  width: 28px;
  height: 30px;
  line-height: 28px;
  text-align: center;
  font-size: v.$font-size-md;
  font-weight: 700;
  background-color: color.adjust(v.$primary-color, $alpha: -0.6);
  border: 2px solid v.$primary-color;
  color: v.$text-primary;
  cursor: pointer;
  transition: all 0.15s;

  &:first-child {
    border-radius: 50% 0 0 50%;
  }

  &:last-child {
    border-radius: 0 50% 50% 0;
  }

  &:hover {
    color: v.$primary-color;
    border-color: v.$primary-color;
    background: color.adjust(v.$primary-color, $alpha: -0.9);
  }

  &:active {
    transform: translateY(1px);
  }

  &:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }
}

/* =================== Scoring Configuration =================== */
.scoringGrid {
  display: flex;
  flex-direction: column;
  gap: v.$space-sm;
}

/* Each logical row (injected by component when >5 categories) */
.scoringRow {
  display: grid;
  grid-template-columns: repeat(5, minmax(0, 1fr));
  gap: v.$space-xs;
}

@media (max-width: 900px) {
  .scoringRow {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
}
@media (max-width: 700px) {
  .scoringRow {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}
@media (max-width: 520px) {
  .scoringRow {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

.scoringSetting {
  display: flex;
  flex-direction: column;
  gap: v.$space-xs;
  padding: 0 v.$space-xs; // horizontal padding for tap target
  position: relative;
}

/* Compact subgroup heading (h4) */
.subgroupTitle {
  font-size: v.$font-size-sm;
  font-weight: 700;
  color: v.$primary-color;
  letter-spacing: 0.06em;
  text-transform: uppercase;
  margin: 0 0 v.$space-xs 0; // Remove large top margin
}

/* Wrapper for subgroup to control spacing between sections */
.scoringSubgroup {
  margin-top: 0; // remove default spacing between subgroups
}

/* Make expand button span 2 columns if it is alone on the last row
   Fixed 8-column grid version (matches column 1 of any row): */
.scoringGrid > .expandButton:last-child:nth-child(8n + 1) {
  grid-column: span 2;
}

/* NOTE: Removed previous broad @media rule that always forced span 2 for the
   last-child inside scoringSubgroupSplit, because it caused the button to take
   two columns even when other items were on the same row. If needed for the
   auto-fill subgroup grids, implement a JS-driven class (e.g. .expandButtonWide)
   only when detection confirms it starts a new row. */

.statLabel {
  font-size: v.$font-size-xs;
  font-weight: 500;
  color: v.$text-secondary;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  text-align: center;
}

.pointsInput {
  @extend .numberInput;
  width: 100%;
  border-left: 2px solid v.$primary-color;
  border-right: 2px solid v.$primary-color;
  border-radius: v.$border-radius-md;
}

.expandButton {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: transparent;
  color: v.$text-secondary;
  border: 1px dashed v.$border-secondary;
  border-radius: v.$border-radius-md;
  padding: v.$space-sm;
  font-size: v.$font-size-xs;
  cursor: pointer;
  transition: all 0.2s ease;
  margin: v.$space-sm auto 0;
  width: 95%;

  &:hover {
    color: v.$primary-color;
    border-color: v.$primary-color;
    background-color: color.adjust(v.$primary-color, $alpha: -0.95);
  }
}

/* Inline manage container that replaces expand button when open */
.inlineManage {
  border: 1px dashed v.$border-secondary;
  border-radius: v.$border-radius-md;
  padding: v.$space-xs;
  margin-top: v.$space-sm;
  background: color.adjust(v.$background-dark, $lightness: 2%);
  display: grid;
  /* Make right column size to content; left fills remaining without overflowing */
  grid-template-columns: minmax(0, 1fr) max-content;
  grid-auto-flow: row dense;
  gap: v.$space-xs;
  align-items: center;
  /* Ensure it spans the full grid width and measures correctly */
  width: 100%;
  box-sizing: border-box;
  overflow: hidden; // clip any tiny visual bleed from rounded inputs
  contain: layout paint;
}

.inlineManage .pointsInput {
  min-width: 70px;
  box-sizing: border-box;
}

.inlineManage .select {
  min-width: 0;
  width: 100%;
  max-width: 100%;
}

.inlineManage .actionButton {
  justify-self: stretch;
  max-width: 100%;
}

.inlineManage .inlineResetBtn {
  justify-self: end;
  white-space: nowrap;
}

/* Buttons share the same row; Add sits in col1 (2x width), Hide in col2 */
.inlineManage .actionButton {
  grid-column: 1;
}
.inlineManage .inlineResetBtn {
  grid-column: 2;
}

/* Make the inline manage span full width of the grid for clarity */
.scoringGrid > .inlineManage {
  grid-column: 1 / -1 !important;
}
.goalieGrid > .inlineManage {
  grid-column: 1 / -1 !important;
}

/* New flex row scoring subgroups layout */
.scoringSubgroupsRow {
  display: flex;
  align-items: flex-start;
  width: 100%;
  position: relative;
}

.scoringSubgroupSplit {
  flex: 1 1 0;
  display: flex;
  flex-direction: column;
  min-width: 0;
  position: relative;
  padding-right: v.$space-sm;
}

/* vertical divider between Skaters and Goalies */
.scoringSubgroupsRow > .scoringSubgroupSplit:first-child {
  border-right: 1px solid v.$border-secondary;
  padding: 0 v.$space-xs;
  margin-right: v.$space-sm;
}

/* Adjust scoring grid inside split to use 2fr repeating columns for labels/inputs */
.scoringSubgroupSplit .scoringGrid {
  grid-template-columns: repeat(auto-fill, minmax(35px, 1fr));
}

/* Ensure goalie expand button aligns within its grid */
.goalieGrid .expandButton {
  grid-column: 1 / -1;
  margin-top: v.$space-sm;
}

.scoringGrid .expandButton {
  grid-column: 1 / -1;
  margin-top: v.$space-sm;
}

/* Manage stats panel styles */
.manageStatsPanel {
  margin-top: v.$space-sm;
  padding: v.$space-sm v.$space-md;
  border: 1px dashed v.$border-secondary;
  border-radius: v.$border-radius-sm;
  background: color.adjust(v.$background-dark, $lightness: 2%);
  display: flex;
  flex-direction: column;
  gap: v.$space-sm;
}

.manageStatsHeader {
  font-size: v.$font-size-xs;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.06em;
  color: v.$primary-color;
}

.manageStatsRow {
  display: flex;
  flex-wrap: wrap;
  gap: v.$space-xs;
  align-items: center;
}

/* Reusable inline row used in traded picks/keepers forms */
.inlineFormRow {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  align-items: center;
}

/* Small, muted inline labels (e.g., Traded Picks/Keepers headers) */
.mutedSmallLabel {
  font-size: v.$font-size-xs;
  color: v.$text-secondary;
}

/* Generic small text for inline rows like "None" */
.smallText {
  font-size: v.$font-size-xs;
}

/* List row for overrides/keepers entries */
.inlineItemRow {
  display: flex;
  gap: 8px;
  align-items: center;
  font-size: v.$font-size-xs;
}

/* Narrow points input for add-stat control */
.pointsInputNarrow {
  width: 70px;
}

/* Wrapper sizing for player autocomplete input */
.playerAutocompleteWrap {
  position: relative;
  min-width: 260px;
  margin-bottom: v.$space-xs;
}

.noAddableStatsMsg {
  font-size: v.$font-size-xxs;
  color: v.$text-secondary;
}

.removeStatBtn {
  @include v.reset-button;
  font-size: 11px;
  color: v.$text-secondary;
  background: transparent;
  border: 1px solid transparent;
  border-radius: 4px;
  position: absolute;
  top: 2px;
  right: 2px;
  padding: 2px 4px;
  line-height: 1;
  cursor: pointer;

  &:hover {
    color: v.$warning-color;
    border-color: v.$warning-color;
    background: color.adjust(v.$warning-color, $alpha: -0.9);
  }
}

/* =================== Continuity + Sliders =================== */
.settingsGroupScoring {
  // Stabilize panel height so switching Points/Categories doesn't jump
  min-height: 220px;
  display: flex;
  flex-direction: column;
}

// Dark-themed range input consistent with black/sky_blue palette
.rangeInput {
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 28px; // overall control box height for easier touch targets
  background: transparent;
  cursor: pointer;

  &:focus {
    outline: none;
  }

  // WebKit track
  &::-webkit-slider-runnable-track {
    height: 6px;
    background: linear-gradient(
      180deg,
      rgba(v.$background-lighter, 0.25),
      rgba(v.$background-dark, 0.25)
    );
    border: 1px solid v.$border-secondary;
    border-radius: v.$radius-sm;
  }

  // WebKit thumb
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: radial-gradient(
      circle at 40% 40%,
      v.$secondary-color,
      v.$primary-color
    );
    border: 1px solid color.adjust(v.$secondary-color, $lightness: -10%);
    margin-top: -5px; // centers on 6px track
    box-shadow:
      0 0 0 2px rgba(v.$secondary-color, 0.15),
      0 2px 6px rgba(0, 0, 0, 0.4);
  }

  &::-webkit-slider-thumb:focus {
    box-shadow:
      0 0 0 3px rgba(v.$secondary-color, 0.25),
      0 2px 6px rgba(0, 0, 0, 0.5);
  }

  // Firefox track and progress
  &::-moz-range-track {
    height: 6px;
    background: linear-gradient(
      180deg,
      rgba(v.$background-lighter, 0.25),
      rgba(v.$background-dark, 0.25)
    );
    border: 1px solid v.$border-secondary;
    border-radius: v.$radius-sm;
  }

  &::-moz-range-progress {
    height: 6px;
    background: linear-gradient(90deg, v.$secondary-color, v.$primary-color);
    border-radius: v.$radius-sm 0 0 v.$radius-sm;
  }

  &::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: radial-gradient(
      circle at 40% 40%,
      v.$secondary-color,
      v.$primary-color
    );
    border: 1px solid color.adjust(v.$secondary-color, $lightness: -10%);
    box-shadow:
      0 0 0 2px rgba(v.$secondary-color, 0.15),
      0 2px 6px rgba(0, 0, 0, 0.4);
  }
}

.weightLabel {
  margin-top: v.$space-xxs;
  font-size: v.$font-size-xs;
  color: v.$text-secondary;
  text-align: center;
  min-width: 44px;
}

.weightShare {
  font-size: v.$font-size-xxs;
  color: v.$text-secondary;
  text-align: center;
}

/* =================== Action Buttons =================== */
.actionButtons {
  display: grid;
  grid-template-columns: 1fr 1fr; // 2x2 grid for compact layout
  gap: v.$space-xs;
}

.actionButton {
  @include v.button-style;
  background-color: transparent;
  color: v.$text-primary;
  border: 1px solid v.$border-secondary;
  padding: v.$space-xs v.$space-sm; // Reduced padding
  font-size: v.$font-size-xs; // Smaller font
  text-align: center;
  border-radius: v.$border-radius-sm;
  transition: all 0.2s ease;

  &:hover:not(:disabled) {
    background-color: color.adjust(v.$secondary-color, $alpha: -0.8);
    border-color: v.$secondary-color;
    color: v.$secondary-color;
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

/* Variant: Danger emphasis (for Undo) */
.actionButtonDanger {
  color: v.$danger-color;
  border-color: v.$danger-color;
  background-color: color.adjust(v.$danger-color-dark, $alpha: -0.85);

  &:hover:not(:disabled) {
    background-color: color.adjust(
      v.$danger-color-dark,
      $lightness: -5%,
      $alpha: -0.8
    );
    border-color: v.$danger-color;
    color: v.$danger-color;
    box-shadow: 0 0 0 2px rgba(v.$danger-color, 0.15);
  }
}

/* Status / badges */
.statusCluster {
  display: flex;
  align-items: center;
  gap: v.$space-sm;
}

.unsavedBadge {
  font-size: v.$font-size-sm;
  font-weight: 600;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  padding: 4px 16px;
  border-radius: v.$border-radius-sm;
  background: linear-gradient(
    135deg,
    color.adjust(v.$warning-color, $lightness: -10%),
    color.adjust(v.$warning-color, $lightness: -20%)
  );
  color: v.$background-dark;
  border: 1px solid color.adjust(v.$warning-color, $lightness: -5%);

  &.saved {
    background: linear-gradient(
      135deg,
      color.adjust(v.$success-color, $lightness: -5%),
      color.adjust(v.$success-color, $lightness: -15%)
    );
    border-color: v.$success-color;
  }
}

.normalizedBadge {
  font-size: v.$font-size-xxs;
  color: v.$primary-color;
  font-weight: 600;
  letter-spacing: 0.05em;
}

/* Spacing utility for normalized badge placement */
.normalizedBadgeSpaced {
  margin-top: 4px;
}

/* Reset buttons row */
.inlineActions {
  display: flex;
  flex-direction: row;
  gap: v.$space-xs;
  margin-top: v.$space-sm;
}

.inlineResetBtn {
  @include v.button-style;
  background: transparent;
  border: 1px dashed v.$border-secondary;
  color: v.$text-secondary;
  font-size: v.$font-size-xxs;
  padding: v.$space-xxs v.$space-sm;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  width: 50%;
  min-width: 70px;

  &:hover {
    color: v.$primary-color;
    border-color: v.$primary-color;
    background: color.adjust(v.$primary-color, $alpha: -0.95);
  }
}

/* Compact green "+" add action button */
.addActionBtn {
  @include v.reset-button;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  border: 2px solid v.$success-color;
  color: v.$success-color;
  background: transparent;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 800;
  line-height: 1;
  cursor: pointer;
  transition: 0.15s;

  &:hover {
    background: color.adjust(v.$success-color, $alpha: -0.9);
    color: v.$background-dark;
  }
}

/* Confirm state for destructive actions */
.confirmReset {
  border-color: v.$danger-color !important;
  color: v.$danger-color !important;
}

/* Projection source grouping */
.sourceGroup {
  margin-bottom: v.$space-sm;
}

.sourceHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 0 0 v.$space-xs 0;
}

.sourceControlsBar {
  display: flex;
  align-items: center;
  gap: v.$space-xs;
  flex-wrap: wrap;
}

.sourceDisabled {
  opacity: 0.35;
  filter: grayscale(0.2);
}

/* Accessible fieldset styling */
.fieldset {
  border: 1px solid v.$border-secondary;
  border-radius: v.$border-radius-md;
  padding: v.$space-sm v.$space-md v.$space-md;
  margin: 0 0 v.$space-md 0;
}

.legend {
  padding: 0 v.$space-xs;
  font-size: v.$font-size-sm;
  font-weight: 700;
  letter-spacing: 0.06em;
  text-transform: uppercase;
  color: v.$primary-color;
}

.persistIcon,
.sessionIcon {
  font-size: 10px;
  margin-left: 4px;
  vertical-align: middle;
  opacity: 0.7;
}

.persistIcon {
  color: v.$primary-color;
}

.sessionIcon {
  color: v.$warning-color;
}

.visuallyHidden {
  position: absolute !important;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;
}

/* Generic utility to hide elements (used to keep dev-only controls in DOM) */
.hidden {
  display: none !important;
}

.accordionToggle {
  @include v.reset-button;
  font-size: v.$font-size-xs;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  color: v.$text-secondary;
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding: 2px 6px;
  border: 1px solid v.$border-secondary;
  border-radius: 4px;
  cursor: pointer;
  transition: 0.15s;

  &:hover {
    color: v.$primary-color;
    border-color: v.$primary-color;
  }
}

/* Small left margin utility for toggle inside legends */
.accordionToggleSpacer {
  margin-left: 8px;
}

/* ===== Projection Source Compact Summary (Chips) ===== */
.sourceChipsRow {
  display: flex;
  flex-wrap: wrap;
  gap: v.$space-md;
  margin: 10px;
  justify-content: space-between; // distribute across full row
  align-items: stretch;
}

.sourceChip {
  flex: 1 1 140px; // uniform flex basis
  max-width: 180px; // prevent over-expansion on wide screens
  display: flex; // override inline-flex on sourceChip for consistent flex behaviour
  justify-content: space-between;
  align-items: center;
  box-sizing: border-box;
  border-radius: v.$border-radius-md;
  font-size: v.$font-size-xs;
  font-family: v.$font-family-primary, sans-serif;
  padding: 4px 8px;
}

.sourceChipEnabled {
  border-color: v.$primary-color;
  box-shadow:
    0 0 0 1px color.adjust(v.$primary-color, $alpha: -0.7),
    0 0 8px -2px v.$primary-color;
}

.sourceChip:hover {
  border-color: v.$primary-color;
  color: v.$primary-color;
}

.sourceChipName {
  font-weight: 600;
  letter-spacing: 0.04em;
  margin-left: 5%;
}

.sourceChipWeight {
  font-variant-numeric: tabular-nums;
  opacity: 0.75;
}

.sourceChipShare {
  font-size: 10px;
  padding: 2px 4px;
  border-radius: v.$border-radius-sm;
  background: linear-gradient(
    135deg,
    color.adjust(v.$primary-color, $alpha: -0.85),
    color.adjust(v.$secondary-color, $alpha: -0.85)
  );
  color: v.$primary-color;
  font-weight: 600;
}

.sourceChipDisabled {
  opacity: 0.4;
  filter: grayscale(0.3);
}

.editWeightsBtn {
  @include v.button-style;
  font-size: 10px;
  padding: 4px 8px;
  letter-spacing: 0.08em;
  text-transform: uppercase;
  font-size: v.$font-size-xs;

  background: linear-gradient(
    135deg,
    color.adjust(v.$primary-color, $alpha: -0.6),
    color.adjust(v.$secondary-color, $alpha: -0.62)
  );
  border: 2px solid v.$primary-color;
  border-radius: v.$border-radius-md;
  text-align: center;
  height: 100%; // stretch to tallest in row for alignment
  display: flex;
  align-items: center;
  justify-content: center;
  flex: 1 1 140px; // uniform flex basis
  max-width: 180px; // prevent over-expansion on wide screens

  &:hover {
    border-color: v.$primary-color;
    color: v.$primary-color;
    background: color.adjust(v.$primary-color, $alpha: -0.92);
  }
}

/* ===== Popover (Weights Editor) ===== */
.weightsPopoverOverlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.55);
  backdrop-filter: blur(4px);
  z-index: 400;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding-top: 72px;
}

.weightsPopover {
  width: min(900px, 92%);
  max-height: 70vh;
  overflow: auto;
  background: linear-gradient(
    180deg,
    color.adjust(v.$background-dark, $lightness: -3%),
    color.adjust(v.$background-dark, $lightness: 2%)
  );
  border: 1px solid v.$border-secondary;
  border-radius: 12px;
  padding: 16px 20px 20px;
  box-shadow:
    0 8px 32px -4px rgba(0, 0, 0, 0.65),
    0 0 0 1px rgba(255, 255, 255, 0.04);
  position: relative;
  animation: popIn 0.28s cubic-bezier(0.4, 0.8, 0.2, 1);
}

@keyframes popIn {
  from {
    opacity: 0;
    transform: translateY(12px) scale(0.97);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.weightsPopoverHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

/* Header control cluster in weights popover */
.weightsHeaderControls {
  display: flex;
  gap: 8px;
  align-items: center;
}

.weightsPopoverTitle {
  font-size: 13px;
  text-transform: uppercase;
  letter-spacing: 0.08em;
  font-weight: 700;
  color: v.$primary-color;
}

.closePopoverBtn {
  @include v.reset-button;
  width: 30px;
  height: 30px;
  border: 1px solid v.$border-secondary;
  border-radius: 6px;
  color: v.$text-secondary;
  background: v.$background-dark;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: 0.15s;

  &:hover {
    color: v.$primary-color;
    border-color: v.$primary-color;
  }
}

.popoverSectionTitle {
  font-size: 11px;
  font-weight: 600;
  letter-spacing: 0.06em;
  text-transform: uppercase;
  margin: 14px 0 6px;
  color: v.$text-secondary;
}

/* Inline label layout in popover lists */
.popoverInlineLabel {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 11px;
}

.popoverGrid {
  display: grid;
  gap: 8px;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
}

/* ===== Subsections inside Keepers & Traded Picks ===== */
.subsection {
  padding: v.$space-sm 0;
}

.subsection + .subsection {
  border-top: 1px solid v.$border-secondary;
  margin-top: v.$space-sm;
  padding-top: v.$space-sm;
}

.subsectionTitle {
  font-size: v.$font-size-xs;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.06em;
  color: v.$primary-color;
  margin: 0 0 v.$space-xs 0;
}

/* Tighter rows inside subsections */
.subsection .settingRow {
  margin-bottom: v.$space-xs;
}

/* Compact owner/team select placement */
.ownerSelectInline {
  min-width: 100px;
}

/* Scrollable list areas to keep panel height stable */
.listScrollable {
  max-height: 120px;
  overflow-y: auto;
  padding-right: 6px;
}

/* Smaller autocomplete input specifically for DraftSettings usage */
.playerAutoInputSmall {
  height: 30px !important;
  line-height: 30px !important;
  padding: 0 30px 0 10px !important; // leave space for status icon
  border: 2px solid v.$primary-color !important;
  border-radius: v.$border-radius-md !important;
}

/* Add a little spacing under the autocomplete */
.playerAutocompleteWrap {
  position: relative;
  min-width: 120px;
  max-width: 280px;
  margin-bottom: v.$space-xs;
}

/* ===== Keeper status indicator ===== */
.statusIcon {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  line-height: 1;
  margin-left: 4px;
}

.statusOk {
  border: 2px solid v.$primary-color;
  color: v.$primary-color;
  background: color.adjust(v.$primary-color, $alpha: -0.9);
}

.statusError {
  border: 2px solid v.$danger-color;
  color: v.$danger-color;
  background: color.adjust(v.$danger-color, $alpha: -0.9);
}

/* Position variant when used beside the autocomplete input */
.statusIconInput {
  position: absolute;
  right: 8px;
  top: 50%;
  transform: translateY(-50%);
}

.popoverSourceCard {
  border: 1px solid v.$border-secondary;
  border-radius: 8px;
  padding: 8px 10px 10px;
  background: radial-gradient(
    circle at 40% 20%,
    color.adjust(v.$background-dark, $lightness: 4%),
    v.$background-dark 75%
  );
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.popoverSourceCardDisabled {
  opacity: 0.4;
  filter: grayscale(0.25);
}

.popoverSourceHeader {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 6px;
}

.popoverSourceName {
  font-size: 11px;
  font-weight: 600;
  letter-spacing: 0.05em;
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.inlineToggle {
  cursor: pointer;
}

.popoverSliderRow {
  display: flex;
  align-items: center;
  gap: 8px;
}

.popoverSlider {
  flex: 1;
}

.shareBadge {
  font-size: 10px;
  padding: 2px 6px;
  border-radius: 6px;
  background: linear-gradient(
    135deg,
    color.adjust(v.$primary-color, $alpha: -0.85),
    color.adjust(v.$secondary-color, $alpha: -0.85)
  );
  font-weight: 600;
  color: v.$primary-color;
}

.weightNumberInput {
  width: 54px;
  background: v.$background-dark;
  border: 1px solid v.$border-secondary;
  border-radius: 6px;
  padding: 4px 6px;
  font-size: 11px;
  text-align: center;
  color: v.$text-primary;

  &:focus {
    outline: none;
    border-color: v.$primary-color;
    box-shadow: 0 0 0 2px color.adjust(v.$primary-color, $alpha: -0.8);
  }
}

/* Neon slider variant inside popover */
.popoverSlider.rangeInput {
  height: 20px;
}

.popoverSlider.rangeInput::-webkit-slider-runnable-track {
  background: linear-gradient(
    90deg,
    rgba(0, 180, 255, 0.15),
    rgba(0, 180, 255, 0.05)
  );
  border-color: rgba(0, 180, 255, 0.4);
}

.popoverSlider.rangeInput::-webkit-slider-thumb {
  background: radial-gradient(circle at 40% 40%, #0af, #058ad6);
  box-shadow:
    0 0 0 2px rgba(0, 170, 255, 0.35),
    0 0 10px -2px #0af;
}

.popoverSlider.rangeInput::-moz-range-track {
  background: linear-gradient(
    90deg,
    rgba(0, 180, 255, 0.15),
    rgba(0, 180, 255, 0.05)
  );
  border-color: rgba(0, 180, 255, 0.4);
}

.popoverSlider.rangeInput::-moz-range-thumb {
  background: radial-gradient(circle at 40% 40%, #0af, #058ad6);
  box-shadow:
    0 0 0 2px rgba(0, 170, 255, 0.35),
    0 0 10px -2px #0af;
}

/* Utility for slim height fieldset version */
.slimFieldset {
  padding: 8px 12px 10px;
}

.slimFieldset .legend {
  font-size: v.$font-size-sm;
}

/* =================== Responsive Design =================== */
@media (max-width: v.$breakpoint-desktop) {
  .settingsHeader {
    flex-direction: column;
    gap: v.$space-md;
    text-align: center;
  }

  .settingsGrid {
    grid-template-columns: 1fr;
  }
}

@media (max-width: v.$breakpoint-tablet) {
  .title {
    font-size: v.$font-size-lg;
  }

  .settingsGroup {
    padding: v.$space-sm;
  }

  .rosterGrid {
    grid-template-columns: repeat(3, 1fr);
  }

  .scoringGrid {
    grid-template-columns: repeat(2, 1fr);
  }

  .draftTypeToggle {
    width: 100%;
  }

  .toggleButton {
    flex: 1;
  }

  .settingsGroupScoring {
    min-height: 200px;
  }

  .scoringSubgroupsRow {
    flex-direction: column;
  }

  .scoringSubgroupsRow > .scoringSubgroupSplit:first-child {
    border-right: none;
    padding-right: 0;
    margin-right: 0;
    border-bottom: 1px solid v.$border-secondary;
    padding-bottom: v.$space-md;
    margin-bottom: v.$space-md;
  }
}

/* Spacing utility for sections within popover */
.sectionSpacer {
  margin-top: 12px;
}
