@use "sass:color";
@use "styles/vars" as v; // Use an alias for brevity
@use "sass:math";

// Define border color and width as variables for consistency
$metric-border-color: #07aae2; // Your blue color
$selected-border-width: 2px; // The width of the indicator

.container {
  width: 100%;
  margin: 0px auto;
  color: v.$text-color-primary;
  font-family: v.$font-family-primary;
  transition: margin-bottom v.$transition-duration v.$transition-easing;
}

/* --- Filters Styling --- */
.filters {
  margin: 0 auto 20px auto; // Add consistent bottom margin
  color: v.$text-color-primary;
  overflow: hidden;
  outline: 8px solid v.$background-dark;
  background-color: v.$background-dark;
  border: 3px solid v.$background-light;
  border-radius: v.$border-radius;
  width: 100%;
  padding: 15px;
  position: relative; // For icon

  display: flex;
  flex-direction: column;
  gap: 15px; // Consistent gap between sections (title, basic filters, metric filters, reset)

  // Transition for filter content height/visibility
  .filterContainer, // Basic filter rows (desktop)
  .filterContainerMobile, // Basic filter rows (mobile)
  .metricFilterContainer, // Container for metric header + groups
  .buttonReset {
    // Reset button
    transition: max-height 0.4s v.$transition-easing,
      opacity 0.3s v.$transition-easing, visibility 0.3s v.$transition-easing,
      margin 0.4s v.$transition-easing, padding 0.4s v.$transition-easing;
    max-height: 1000px; // Arbitrary large height when visible
    opacity: 1;
    visibility: visible;
    overflow: hidden;
  }

  // --- Styles when minimized on mobile ---
  &.minimized {
    margin-bottom: 10px;
    padding-bottom: 15px; // Keep padding consistent with visible state?
    gap: 0; // Collapse gap when minimized

    // Hide filter controls, metric filters, and button
    .filterContainer,
    .filterContainerMobile,
    .metricFilterContainer,
    .buttonReset {
      max-height: 0;
      opacity: 0;
      visibility: hidden;
      margin: 0; // Remove margins
      padding: 0; // Remove padding
      border: none; // Remove borders if any
    }

    // Adjust title appearance when minimized
    .filtersTitle {
      padding-bottom: 0;
      border-bottom: none;
      margin-bottom: 0; // Remove margin below title
    }
  }
}

.filtersTitle {
  width: 100%;
  text-align: left;
  font-size: clamp(1.5rem, 4vw, 1.8rem);
  font-weight: 100;
  color: v.$text-color-primary;
  font-family: v.$font-family-primary;
  letter-spacing: 1.5px;
  padding-bottom: 10px;
  border-bottom: 2px solid v.$secondary-color;
  // margin-bottom: 5px; // Spacing handled by parent gap
  position: relative;
  padding-right: 30px; // Space for icon
  transition: padding-bottom v.$transition-duration v.$transition-easing,
    border-bottom v.$transition-duration v.$transition-easing,
    margin-bottom v.$transition-duration v.$transition-easing;

  @media (max-width: #{v.$breakpoint-tablet - 1px}) {
    cursor: pointer; // Make clickable on mobile
    user-select: none;
  }
}

.minimizeToggleIcon {
  position: absolute;
  right: 10px;
  top: 40%; // Adjust vertical position as needed
  transform: translateY(-50%) rotate(0deg);
  font-size: 1.2rem;
  color: v.$secondary-color;
  transition: transform 0.3s v.$transition-easing;
  pointer-events: none; // Icon itself isn't clickable

  &.minimized {
    transform: translateY(-50%) rotate(-180deg); // Point up when minimized
  }
}

.acronym {
  color: v.$secondary-color;
  font-weight: 100;
}

/* --- Desktop Filter Layout --- */
.filterContainer {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
  align-items: flex-start;
  gap: 20px; // Gap between filter rows (Own%, Team, Pos)
}

.filterRow {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  padding: 10px;
  background-color: v.$background-medium;
  border-radius: 8px;
  min-width: 200px;
  flex: 1; // Allow rows to grow a bit
  max-width: 30%; // Prevent excessive stretching
}

.label {
  font-size: 0.9em;
  font-weight: 600;
  color: v.$text-color-secondary;
}

/* --- Mobile Filter Layout --- */
.filterContainerMobile {
  display: flex;
  flex-direction: column;
  gap: 15px; // Slightly smaller gap on mobile
  width: 100%;
}

.ownershipTeamContainer {
  display: flex;
  flex-direction: column; // Stack Own/Team vertically on smallest screens
  gap: 15px;
  width: 100%;

  @media (min-width: 480px) {
    // Side-by-side on slightly larger mobile screens
    flex-direction: row;
    justify-content: space-around;
    align-items: flex-start; // Align tops
    gap: 20px;
  }
}

.filterRowMobileOwnership,
.filterRowMobileTeam {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%; // Take full width when stacked
  padding: 10px 15px; // Adjust padding
  background-color: v.$background-medium;
  border-radius: 8px;
  gap: 8px;

  @media (min-width: 480px) {
    width: 48%; // Roughly half width when side-by-side
  }
}

.filterRowMobile {
  // Container for Positions on mobile
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  gap: 10px;
  padding: 10px 15px;
  background-color: v.$background-medium;
  border-radius: 8px;

  > span {
    // The label ("Positions:", etc.)
    font-size: 0.9em;
    font-weight: 600;
    color: v.$text-color-secondary;
    margin-bottom: 5px;
  }
}

.positionCheckboxGroup {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px 15px; // Row and column gap
}

.labelMobile {
  font-size: 0.9em;
  font-weight: 600;
  color: v.$text-color-secondary;
  text-align: center;
}

/* --- Input Styling (Common & Specific) --- */
@mixin range-track {
  width: 100%;
  height: 8px;
  cursor: pointer;
  background: v.$background-light;
  border-radius: 4px;
  border: 1px solid v.$border-color-secondary;
}
@mixin range-thumb {
  height: 18px;
  width: 18px;
  border-radius: 50%;
  background: v.$primary-color;
  cursor: pointer;
  border: 2px solid v.$text-color-primary;
  margin-top: -6px; // Adjust thumb position vertically relative to track
}

.slider,
.sliderMobile {
  appearance: none;
  width: 100%;
  max-width: 250px; // Limit slider width
  height: 18px; // Ensure consistent height for focus styles
  background: transparent; // Track styled separately
  cursor: pointer;
  &:focus {
    outline: none;
  }
  &::-webkit-slider-runnable-track {
    @include range-track;
  }
  &::-moz-range-track {
    @include range-track;
  }
  &::-webkit-slider-thumb {
    appearance: none;
    @include range-thumb;
  }
  &::-moz-range-thumb {
    @include range-thumb;
    border: 0; // FF needs border 0 on thumb
  }
  &:focus::-webkit-slider-thumb {
    box-shadow: 0 0 0 3px rgba(v.$primary-color, 0.5);
  }
  &:focus::-moz-range-thumb {
    box-shadow: 0 0 0 3px rgba(v.$primary-color, 0.5);
  }
}

.select,
.selectMobile {
  appearance: none;
  background-color: v.$background-light;
  border: 1px solid v.$border-color-secondary;
  border-radius: 6px;
  padding: 8px 30px 8px 10px; // Space for arrow
  font-size: 0.9em;
  color: v.$text-color-primary;
  cursor: pointer;
  width: 100%;
  max-width: 150px; // Limit select width
  // Custom arrow
  background-image: linear-gradient(
      45deg,
      transparent 50%,
      v.$text-color-secondary 50%
    ),
    linear-gradient(135deg, v.$text-color-secondary 50%, transparent 50%);
  background-position: calc(100% - 15px) center, calc(100% - 10px) center;
  background-size: 5px 5px, 5px 5px;
  background-repeat: no-repeat;
  &:focus {
    outline: none;
    border-color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.3);
  }
}

.positionCheckbox {
  // Style for position checkboxes LABEL
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  font-size: 0.9em;
  gap: 6px;

  input[type="checkbox"] {
    // Style for position INPUT checkbox
    appearance: none;
    width: 18px;
    height: 18px;
    border: 2px solid v.$border-color-secondary;
    border-radius: 4px;
    background-color: v.$background-light; // Use light background for checkbox itself
    cursor: pointer;
    position: relative;
    transition: background-color v.$transition-duration v.$transition-easing,
      border-color v.$transition-duration v.$transition-easing;

    &:checked {
      background-color: v.$primary-color;
      border-color: v.$primary-color;
      &::after {
        // Checkmark
        content: "";
        position: absolute;
        left: 5px;
        top: 1px;
        width: 4px;
        height: 9px;
        border: solid v.$text-color-primary; // White/light checkmark
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
      }
    }
    &:focus {
      outline: none;
      box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.3);
    }
  }
}

/* --- Metric Filter Section --- */
.metricFilterContainer {
  display: flex;
  flex-direction: column;
  gap: 5px; // Reduced gap slightly
  padding: 15px;
  background-color: v.$background-medium;
  border-radius: 8px;
}

.metricFilterHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 10px;

  .label {
    font-size: 1em;
    font-weight: 600;
    color: v.$text-color-secondary;
    margin-right: auto;
  }
}

/* --- Layout Styles --- */

.gpGroupContainer {
  width: 100%;
  padding: 5px 0;
  border-bottom: 1px solid v.$border-color-secondary;
  margin-bottom: 15px;

  .metricGroupCheckboxes {
    justify-content: center;
    padding-left: 0;
    min-height: auto; // Don't need forced height for single checkbox
  }
}

.metricPresetButtons {
  display: flex;
  gap: 8px;
  flex-shrink: 0;
  button {
    // Style preset buttons
    padding: 4px 8px;
    font-size: 0.8em;
    background-color: v.$background-light;
    border: 1px solid v.$border-color-secondary;
    color: v.$text-color-secondary;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s, border-color 0.2s;
    &:hover:not(:disabled) {
      background-color: color.scale(v.$background-light, $lightness: -10%);
      border-color: v.$primary-color;
    }
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }
}

.skaterGoalieRow {
  display: flex;
  flex-direction: row;
  gap: 20px;

  @media (max-width: #{v.$breakpoint-tablet - 1px}) {
    flex-direction: column;
    gap: 15px;
  }
}

/* --- NEW: Styles for Metric Groups --- */
.metricGroupsWrapper {
  display: flex;
  flex-direction: column; // Stack groups vertically
  gap: 15px; // Space between individual groups (Points, Peripherals, etc.)
  margin-top: 5px; // Small space below the header
}

%metricsColumn {
  flex: 1;
  min-width: 0;
  border: 1px solid v.$primary-color;
  border-radius: 8px;
  padding: 20px 15px 15px 15px;
  position: relative;
  margin: 0;

  @media (max-width: #{v.$breakpoint-tablet - 1px}) {
    flex-basis: auto;
  }
}

.skaterMetricsColumn {
  @extend %metricsColumn;
}

.goalieMetricsColumn {
  @extend %metricsColumn;
}

.columnLabel {
  font-size: 1.1em;
  font-weight: bold;
  color: v.$border-color;
  padding: 0 10px;
  margin-left: 10px;
  // background-color: v.$background-medium; // Needed if border shows through legend
  width: auto;
  border: none;
}

// Containers for sub-groups (Points/Peripherals, Quality/Quantity)
.skaterSubGroupsRow,
.goalieSubGroupsRow {
  display: flex;
  flex-direction: row; // Side-by-side layout for sub-groups
  gap: 15px; // Gap between sub-groups

  @media (max-width: 600px) {
    // Stack sub-groups on very small screens if needed
    flex-direction: column;
    gap: 10px;
  }
}

// Styling for the individual group rendered by the helper
.metricGroup {
  flex: 1; // Allow sub-groups to share space equally
  min-width: 0; // Prevent flex overflow
  // background-color: rgba(v.$background-light, 0.1); // Optional subtle background
  // padding: 5px;
  // border-radius: 4px;
}

.metricGroupTitle {
  // Now a button, needs base styles + button resets
  display: block;
  width: 100%; // Make button take full width of its group
  font-weight: 600;
  font-size: 0.9em;
  color: v.$text-color-secondary;
  text-align: center;
  border-bottom: 1px solid v.$border-color-secondary; // Keep the separator look
  padding-bottom: 3px;
  margin-bottom: 10px;

  // Button Resets
  background: none;
  color: inherit;
  border: none;
  padding: 0; // Reset padding before re-applying specific padding
  padding-bottom: 3px; // Re-apply specific padding
  font: inherit;
  cursor: pointer;
  outline: inherit;
  transition: color 0.2s ease;

  &:hover,
  &:focus {
    color: v.$primary-color; // Highlight on hover/focus
    border-bottom-color: v.$primary-color;
  }
}

.metricGroupCheckboxes {
  display: flex;
  flex-wrap: wrap;
  gap: 6px 12px;
  justify-content: center;
  padding-left: 0;
  min-height: 40px;
}

.metricCheckbox {
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  font-size: 0.85em;
  gap: 5px;
  color: v.$text-color-primary;
  white-space: nowrap;

  input[type="checkbox"] {
    // Style for metric INPUT checkbox
    appearance: none;
    width: 16px; // Slightly smaller than position checkboxes
    height: 16px;
    border: 2px solid v.$border-color-secondary;
    border-radius: 4px;
    background-color: v.$background-light; // Match checkbox background elsewhere
    cursor: pointer;
    position: relative;
    flex-shrink: 0; // Prevent checkbox shrinking if label is long
    transition: background-color v.$transition-duration v.$transition-easing,
      border-color v.$transition-duration v.$transition-easing;

    &:checked {
      background-color: v.$primary-color;
      border-color: v.$primary-color;
      &::after {
        // Checkmark
        content: "";
        position: absolute;
        left: 4px;
        top: 1px;
        width: 4px;
        height: 8px;
        border: solid v.$text-color-primary; // White/light checkmark
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
      }
    }
    &:focus {
      outline: none;
      box-shadow: 0 0 0 2px rgba(v.$primary-color, 0.3);
    }
  }
}

.skaterMetricsColumn {
  .metricGroupCheckboxes {
    // Target checkboxes specifically within the skater column
    .metricCheckbox {
      // Aim for roughly 33% width minus gap spacing
      // Adjust the percentage and gap subtraction as needed based on actual rendering
      flex-basis: calc(33.33% - 30px); // (gap is 12px -> ~5px per side)
      justify-content: center; // Center content within the flex item
    }
  }
}

/* Reset Button Styling & Placement */
.buttonReset {
  padding: 10px 20px;
  font-size: 1em;
  background-color: v.$secondary-color;
  color: v.$background-dark; // Dark text on light button
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.2s;
  font-weight: bold;
  &:hover {
    background-color: color.scale(v.$secondary-color, $lightness: -10%);
  }
  align-self: center; // Center the button horizontally within the filters container
  margin-top: 10px; // Add some space above the button (gap also contributes)
  width: 100%;
  max-width: 300px; // Limit width of reset button
}

/* --- Name/Injury/Table/Pagination/Expanded Details Styling --- */
// --- (No changes below this line) ---

.nameAndInjuryWrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  justify-content: center; // Center vertically
  padding: 2px 0; // Small vertical padding
}
.leftNamePart {
  width: 100%;
  display: flex;
  align-items: center;
  text-align: left;
}
.rightInjuryPart {
  width: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start; // Align left
  gap: 5px;
  font-size: 0.8em; // Smaller injury text
  color: v.$text-color-secondary; // Subdued color
  .statusRightInjuryPart {
    font-weight: bold;
    color: darken(red, 10%); // Darker red for status
    flex-shrink: 0;
  }
  .injuryNoteRightInjuryPart {
    // Allow wrapping but hide overflow
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
  .imageContainer {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    margin-left: auto; // Push image to the right if needed
  }
}

.playerName {
  font-weight: bold;
}

.tableContainer {
  margin-top: 20px; // Consistent spacing
  overflow-x: auto;
  background-color: v.$background-medium;
  border-radius: v.$border-radius;
  box-shadow: v.$box-shadow;
  outline: 10px solid v.$background-dark;
  &::-webkit-scrollbar {
    // Hide scrollbar for webkit
    display: none;
  }
  -ms-overflow-style: none; // Hide scrollbar for IE/Edge
  scrollbar-width: none; // Hide scrollbar for Firefox
}
.table {
  width: 100%;
  border-collapse: collapse;
  thead {
    position: sticky;
    top: 0;
    background-color: v.$background-dark;
    color: v.$text-color-secondary;
    z-index: 2; // Ensure header stays above body content
    th {
      border-collapse: collapse;
      background-color: v.$background-dark;
      color: v.$text-color-primary;
      font-weight: 900;
      font-family: v.$font-family-primary;
      font-size: 14px;
      height: v.$table-header-height; // Use variable if defined
      padding: v.$table-cell-padding; // Use variable if defined
      cursor: pointer;
      text-align: center;
      border-bottom: 2px solid v.$secondary-color;
      white-space: nowrap; // Prevent header text wrapping
    }
  }
  tbody {
    tr {
      font-family: v.$font-family-primary;
      height: 64px; // Adjust row height as needed
      text-align: center;
      transition: background-color v.$transition-duration v.$transition-easing;
      &:nth-child(even) {
        background-color: v.$background-light;
      }
      &:nth-child(odd) {
        background-color: v.$background-dark;
      }
      &:hover {
        background-color: color.scale(v.$primary-color, $lightness: -30%);
      }
      td {
        padding: 4px 5px; // Keep padding consistent
        border: 0.5px solid v.$border-color-secondary;
        vertical-align: middle; // Crucial for consistent height
        font-size: 14px;
        box-sizing: border-box; // Ensure padding/border included in height calc
      }
    }
  }
  // Special styling for first column (Name)
  thead th:first-child,
  tbody tr td:first-child {
    border-right: 5px solid v.$secondary-color; // Prominent right border for name column
    text-align: left;
    padding: v.$table-cell-padding; // Use variable
    font-size: 16px; // Slightly larger for name
  }
  // Override borders specifically for the Name column header/cells if needed
  thead th:first-child {
    border-bottom: 2px solid v.$secondary-color; // Keep header bottom border consistent
  }
  tbody tr td:first-child {
    border-bottom: 0.5px solid v.$border-color-secondary; // Match other body cells' bottom border
  }
}

.percentileFlexContainer {
  display: flex;
  justify-content: center;
  align-items: center; // Align items top baseline
  flex-wrap: wrap;
  gap: 0px 6px;
  padding: 4px 0;
  // Ensure the container itself doesn't contribute to height changes
  line-height: 1; // Reset line height just in case
}

.percentileContainer {
  // Individual metric box + label (Desktop & GP%)
  display: inline-flex; // Allows side-by-side layout within flex container
  flex-direction: column;
  align-items: center;
  transition: opacity v.$transition-duration v.$transition-easing; // For dimming

  &.dimmed {
    // Applied when filters are active, but this metric is NOT selected
    opacity: 0.6; // Dim non-selected metrics
  }
}

.percentileLabel {
  font-size: 0.75em;
  margin-bottom: 3px;
  color: v.$text-color-secondary;
  white-space: nowrap;
  transition: color v.$transition-duration v.$transition-easing;

  // Style for selected label is applied directly via class
  &.selectedLabel {
    color: $metric-border-color; // Use the same color as the border for consistency
    font-weight: bold; // Optional
  }
}

.percentileBox {
  padding: 5px 4px; //  padding consistent
  border-radius: 4px;
  font-size: 1em;
  font-weight: bold;
  text-align: center;
  min-width: 38px;
  color: v.$text-color-primary;
  box-sizing: border-box;
  transition: border-color v.$transition-duration v.$transition-easing; // Transition border color

  // Add transparent border by default to reserve space
  border: $selected-border-width solid transparent;

  // Apply border color only when selected class is present
  &.selectedBox {
    border-color: $metric-border-color; // Change color, not add border/outline
    // outline/offset removed
  }
}

.pagination {
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  margin-top: 20px; // Use consistent spacing
  padding: 10px 0;
  gap: 20px;
  button {
    padding: 8px 15px;
    font-size: 0.9em;
    background-color: v.$primary-color;
    color: v.$text-color-primary;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
    &:hover:not(:disabled) {
      background-color: color.scale(v.$primary-color, $lightness: -10%);
    }
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }
  span {
    font-family: v.$font-family-primary;
    font-size: 16px;
    color: v.$text-color-primary;
  }
}

/* --- Mobile Table Specific Styles --- */
.expandButton {
  background: transparent;
  border: none;
  color: v.$primary-color;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0 5px;
  transition: transform v.$transition-duration v.$transition-easing,
    color v.$transition-duration v.$transition-easing;
  line-height: 1; // Prevent extra spacing
  display: inline-flex; // Ensure proper alignment
  align-items: center;
  justify-content: center;
  &:hover {
    transform: scale(1.1);
    color: v.$secondary-color;
  }
}

.containerMobile {
  // Wrapper for mobile table
  overflow-x: auto; // Allow horizontal scroll if needed, though less likely now
  outline: 8px solid v.$background-dark;
  background-color: v.$background-dark;
  border: 3px solid v.$background-light;
  border-radius: v.$border-radius;
  margin-top: 20px; // Consistent spacing
}
.tableMobile {
  width: 100%;
  border-collapse: collapse;
  border: none; // Remove outer border, handled by container
  border-radius: 0; // No radius inside container

  thead {
    position: sticky;
    top: 0;
    z-index: 2;
    background-color: v.$background-dark;
    tr {
      border-bottom: 3px solid v.$secondary-color;
    }
    th {
      padding: 8px 5px;
      font-size: 11px; // Smaller header font on mobile
      font-weight: 700;
      color: v.$text-color-secondary;
      background-color: v.$background-dark;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      text-align: center;
      border-right: 1px solid v.$border-color-primary; // Vertical separator lines
      white-space: nowrap;
      cursor: pointer;
      &:first-child {
        // Expand button column
        text-align: center;
        border-right: none;
        width: 5%; // Ensure width consistency with colgroup
        cursor: default; // Not sortable
      }
      &:last-child {
        border-right: none;
      }
    }
  }
  tbody {
    tr {
      border-bottom: 1px solid v.$border-color-secondary;
      transition: background-color v.$transition-duration v.$transition-easing;
      &:last-child:not(.expandedRow) {
        // Avoid double border with expanded row
        border-bottom: none;
      }
      &:nth-child(even) {
        background-color: v.$background-light;
      }
      &:nth-child(odd) {
        background-color: v.$background-dark;
      }
      &:hover:not(.expandedRow) {
        // Don't highlight expanded row itself on hover
        background-color: color.scale(v.$primary-color, $lightness: -30%);
      }
    }
    td {
      padding: 8px 5px;
      font-size: 13px;
      text-align: center;
      vertical-align: middle;
      border-right: 1px solid v.$border-color-secondary;
      &:first-child {
        // Expand button cell
        padding: 0; // Remove padding for button
        border-right: none;
        vertical-align: middle;
      }
      &:nth-child(2) {
        // Name column
        text-align: left;
      }
      &:last-child {
        border-right: none;
      }
    }
  }
  .expandedRow {
    background-color: color.scale(
      v.$background-medium,
      $lightness: -5%
    ) !important; // Slightly darker than even rows
    border-bottom: 2px solid v.$secondary-color; // Clear separation
    td {
      padding: 15px 10px; // More padding for expanded content
      border: none; // No internal borders for expanded cell
    }
  }
}

.expandedDetails {
  // Container within the expanded cell
  display: flex;
  flex-direction: column;
  align-items: center; // Center rows horizontally
  gap: 10px; // Space between rows of stats
  width: 100%;
}

.detailRow {
  // A row of stats within the expanded view
  display: flex;
  flex-wrap: wrap;
  justify-content: center; // Center stats horizontally
  align-items: stretch; // Make items equal height if needed
  gap: 8px; // Gap between individual stats
  width: 100%;
}

.detailItem {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  background-color: v.$background-dark;
  border-radius: 6px;
  padding: 5px;
  min-width: 55px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  flex-grow: 1;
  flex-basis: 0;
  transition: opacity v.$transition-duration v.$transition-easing;

  &.dimmed {
    opacity: 0.6;
  }
}

.detailLabel {
  font-size: 0.7em;
  margin-bottom: 3px;
  color: v.$text-color-secondary;
  text-align: center;
  white-space: nowrap;
  transition: color v.$transition-duration v.$transition-easing;

  &.selectedLabel {
    color: $metric-border-color;
  }
}

.detailValue {
  font-weight: bold;
  text-align: center;
  font-size: 1.1em;
  padding: 4px; // Keep padding consistent
  border-radius: 4px;
  color: v.$text-color-primary;
  width: 100%;
  box-sizing: border-box;
  transition: border-color v.$transition-duration v.$transition-easing; // Transition border color

  // Add transparent border by default
  border: $selected-border-width solid transparent; // Use same width as desktop

  // Apply border color only when selected class is present
  &.selectedBox {
    border-color: $metric-border-color; // Change color
  }
}

.nameAndInjuryWrapperMobile {
  // Container for Name + Injury Icon on mobile rows
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 100%;
}

.leftNamePartMobile {
  flex-grow: 1; // Allow name to take available space
  display: flex;
  align-items: center;
  text-align: left;
  overflow: hidden; // Prevent long names breaking layout
  .playerName {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}
.rightInjuryPartMobile {
  // Injury icon container
  flex-shrink: 0; // Prevent injury icon shrinking
  display: flex;
  align-items: center;
  justify-content: flex-end; // Align icon to the right
}

/* --- Styles for the Collapsible Table/Pagination Content --- */
.collapsibleContent {
  transition: max-height 0.4s v.$transition-easing,
    opacity 0.3s v.$transition-easing, visibility 0.3s v.$transition-easing,
    margin-top 0.4s v.$transition-easing;
  max-height: 5000px; // Arbitrarily large height when visible
  opacity: 1;
  visibility: visible;
  overflow: visible; // Allow potential box shadows etc to show from table container

  // Styles when filters are minimized (applied via parent .containerMinimized)
  .containerMinimized & {
    // Target .collapsibleContent when parent has .containerMinimized
    max-height: 0;
    opacity: 0;
    visibility: hidden;
    margin-top: 0;
    overflow: hidden; // Hide content completely
  }
}

.message {
  // Loading/No results message
  padding: 30px 20px;
  text-align: center;
  color: v.$text-color-secondary;
  font-size: 1.1em;
}
