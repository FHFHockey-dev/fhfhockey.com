/* /styles/wigoCharts.module.scss */
@use "sass:color";
@use "styles/vars" as v; // Import variables from vars.scss
@use "sass:math";
@import url("https://fonts.googleapis.com/css2?family=Train+One&family=Zen+Tokyo+Zoo&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Train+One&display=swap");
/* =================== Main Dashboard Layout =================== */
.wigoDashHeader {
  display: flex;
  flex-direction: column;
  border-collapse: collapse;
}

.wigoHeader {
  margin: v.$space-md auto v.$space-lg;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: flex-end;
  font-family: "Train One", sans-serif;
  letter-spacing: 1.5em;
  font-size: v.$font-size-base * 1.3;
  font-weight: 100;
  line-height: 0.85;
}

.spanColorBlue {
  display: flex;
  justify-content: center;
  align-items: center;
  color: v.$primary-color;
  font-family: "Train One", sans-serif;
  font-size: v.$font-size-base * 1.4;
  font-weight: 900;
}

.wigoDashboardContainer {
  @include v.component-wrapper;
  width: 90%;
  max-width: 2000px;
  height: 87vh;
  margin: 0 auto v.$space-xxl auto;
  display: flex;
  border-collapse: collapse;
  border: 2px solid v.$border-color;
}

.wigoDashboardContent {
  flex-grow: 1;
  background-color: v.$background-dark;
  border-radius: v.$border-radius;
  overflow: hidden;

  // --- Grid Definition ---
  display: grid;
  grid-template-columns: repeat(36, 1fr);
  grid-template-rows: repeat(38, 1fr);
  padding: v.$space-xs;
}

/* =================== Base Styles for Grid Items (Applied Selectively) =================== */

// Mixin for common internal flex setup
@mixin internal-flex-column {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%; // Allow items to fill their grid area
  overflow: hidden;
}

/* =================== Specific Container Styles =================== */

/* --- Top Row --- */
.nameSearchBarContainer {
  // --- Does NOT use component-wrapper ---
  grid-area: 1 / 1 / 3 / 9;
  background-color: v.$background-dark;
  border-bottom: 3px solid #404040;
  border-top-left-radius: v.$border-radius-sm v.$border-radius-sm 0 0;
  padding: 0;
  overflow: visible !important; // MUST override for dropdown
  // Internal layout
  display: flex;
  align-items: center;
  justify-content: space-between;
  > div {
    // Target the actual NameSearchBar component inside
    width: 100%;
    height: 100%;
  }
}

.timeframeComparisonWrapper {
  // --- Uses component-wrapper (or custom equivalent) ---
  grid-area: 1 / 9 / 3 / 29;
  background-color: v.$background-dark; // Match search bg?
  border-bottom: 2px solid v.$border-color-primary;
  display: flex;
  align-items: center; // Vertically center content
  overflow: hidden;
  > div {
    // Target the actual TimeframeComparison component
    width: 100%;
    height: 100%;
  }
}

// --- Grid Area Definition ---
.consistencyRatingContainer {
  grid-area: 1 / 29 / 12 / 37; // Example: Top right area
  border: 1px solid #555;
  border-left: none;
  background-color: v.$background-dark;
  overflow: hidden; // Important
  border-top-right-radius: v.$border-radius-sm;

  // Apply shared container styles
  .chartContainer {
    display: grid;
    grid-template-rows: auto 1fr; // Title auto, content takes rest
    height: 100%;
    width: 100%;

    .chartTitle {
      @extend .ratesLabel; // Inherit base title style
      background-color: darken(v.$primary-color, 32%);
      padding: 6px 0;
      display: flex;
      justify-content: center;
      align-items: center;
      border-bottom: 1px solid #444;
      text-transform: uppercase;
      height: 47.5px;

      h3 {
        margin: 0;
        font-size: 12px;
        font-weight: 600;
        letter-spacing: 10px;
        font-family: "Lucida Sans", "Lucida Grande" sans-serif;
      }
    }

    // --- New styles for Consistency Layout ---
    .consistencyContent {
      display: flex; // Arrange chart and list side-by-side
      height: 100%;
      width: 100%;
      padding: v.$space-md;
      box-sizing: border-box;
      gap: 10px; // Space between chart and list
      overflow: hidden; // Prevent internal scrollbars if possible
    }

    .consistencyChartArea {
      flex: 1 1 65%; // Let chart take slightly more space, allow shrinking
      position: relative; // Needed for chart.js canvas responsiveness
      min-width: 100px; // Prevent collapsing too small
    }

    .consistencyListArea {
      flex: 1 1 35%; // Let list take remaining space
      overflow-y: auto; // Allow scrolling if list is long
      font-size: 11px;
      padding-right: 5px; // Padding on the right of the list
      display: flex;
      flex-direction: column; // Stack items vertically
      justify-content: center;
      align-items: center; // Align items to the left

      ul {
        list-style: none;
        padding: 0;
        margin: 0;
        height: 100%;
        display: flex;
        flex-direction: column; // Stack items vertically
        justify-content: space-evenly;
        align-items: flex-start; // Center items
      }
    }

    .consistencyItem {
      display: flex;
      // <<< Add align-items for vertical centering >>>
      align-items: center;
      padding: 3px 0;
      border-bottom: 1px solid #3a3a3a;

      &:last-child {
        border-bottom: none;
      }
    }

    // --- Style for the Color Swatch ---
    .consistencyColorSwatch {
      display: inline-block; // Allow setting width/height/margins
      width: 10px; // Adjust size as needed
      height: 10px; // Adjust size as needed
      border-radius: 50%; // Make it a circle (optional)
      margin-right: 8px; // Space between swatch and label
      flex-shrink: 0; // Prevent swatch from shrinking
      background-color: #555; // Default/fallback color (for Cardio or items without color)
      border: 1px solid #777; // Optional subtle border
    }

    .consistencyLabel {
      color: #ccc;
      margin-right: 10px;
      white-space: nowrap; // Prevent wrapping
    }

    .consistencyValue {
      color: #fff;
      font-weight: bold;
      margin-left: auto;
      padding-left: 10px;
    }

    .consistencyCount {
      color: #888;
      font-size: 10px;
      margin-left: 5px;
      white-space: nowrap; // Prevent wrapping
    }

    // --- End Consistency Specific Styles ---

    // General placeholders (can be reused)
    .chartLoadingPlaceholder,
    .chartErrorPlaceholder {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100%;
      width: 100%;
      color: #aaa;
      font-size: 12px;
      text-align: center;
      padding: 10px;
      box-sizing: border-box;
    }
    .chartErrorPlaceholder {
      color: #ff6b6b;
    }
  } // End .chartContainer
} // End .consistencyRatingContainer

/* --- Left Column --- */
.playerHeaderContainer {
  // --- Does NOT use component-wrapper (custom look) ---
  grid-area: 3 / 1 / 11 / 9;

  position: relative; // Keep for SVG positioning
  z-index: 1; // Below search
  padding: 0;
  border-bottom: 2px solid v.$border-color;
  background-color: var(--primary-color); // Use CSS var for dynamic color
  overflow: hidden;
}

.percentileChartContainer {
  // --- Uses component-wrapper ---
  grid-area: 11 / 1 / 21 / 9;
  @include internal-flex-column; // Use mixin for internal chart layout (title + canvas)
  padding: 0; // Remove padding, handled by internal elements (.chartTitle, .chartCanvasContainer)
}

.rateStatBarPercentilesContainer {
  // --- Uses component-wrapper ---
  grid-area: 21 / 19 / 30 / 37;
  @include internal-flex-column;
  border: 2px solid v.$border-color-secondary;
  // Center placeholder text
  align-items: center;
  justify-content: center;
  // Placeholder styles
  color: v.$text-color-secondary;
  font-size: v.$font-size-small;
  text-align: center;
}

/* --- Center Columns (Tables) --- */
.countsTableContainer {
  // --- Uses component-wrapper (provides frame, overflow is auto) ---
  grid-area: 3 / 9 / 30 / 19;
  @include internal-flex-column; // Use mixin
  // Override specific wrapper styles
  padding: 0; // Table handles internal padding
  border-left: 2px solid v.$border-color-secondary; // Add right border for separation
  border-right: 2px solid v.$border-color; // Add right border for separation

  background-color: v.$background-dark; // Ensure bg matches theme
  overflow: auto; // Allow table scrolling
}

.ratesTableContainer {
  // --- Uses component-wrapper ---
  grid-area: 3 / 19 / 21 / 29;
  @include internal-flex-column;
  // Override specific wrapper styles

  border-right: 2px solid v.$border-color-secondary; // Add right border for separation
  padding: 0;
  background-color: v.$background-dark;
  overflow: auto;
}

.perGameStatsContainer {
  // --- Uses component-wrapper ---
  grid-area: 21 / 1 / 30 / 5;
  @include internal-flex-column;
  border-left: 2px solid v.$border-color;
  padding: 0 !important; // Let table inside handle padding/scrollbars
  overflow: hidden; // Container hides overflow, table handles scroll
  // Styles for table *inside* are below (.transposedTable)
}

/* --- Right Column --- */

.ratingsContainer {
  // Defines the AREA where PlayerRatingsDisplay will live
  grid-area: 12 / 29 / 21 / 37; // Position on the main dashboard grid

  // Basic container setup - No internal layout rules
  padding: 0;
  border: none;
  background: none;
  overflow: hidden; // Important to contain the component inside
}

.opponentLogContainer {
  // --- Uses component-wrapper ---
  grid-area: 21 / 5 / 30 / 9;
  border-left: v.$border-color 2px solid;
  @include internal-flex-column;
  // Center placeholder text
  align-items: center;
  justify-content: center;
  // Placeholder styles
  color: v.$text-color-secondary;
  font-style: italic;
  font-size: v.$font-size-small;
  text-align: center;
}

/* --- Bottom Row (Charts) --- */
.toiChartContainer,
.ppgChartContainer,
.gameScoreContainer {
  // --- All use component-wrapper ---
  @include internal-flex-column; // Use mixin for internal chart layout (title + canvas)
  border-right: 2px solid v.$border-color;
  border-top: 2px solid v.$border-color;
  padding: 0; // Remove padding, handled by internal elements
}
// Assign grid areas
.toiChartContainer {
  grid-area: 30 / 1 / 39 / 13;
}
.ppgChartContainer {
  grid-area: 30 / 13 / 39 / 25;
}
.gameScoreContainer {
  grid-area: 30 / 25 / 39 / 37;
  border-right: none; // Remove right border from last chart
}

/* /styles/wigoCharts.module.scss */

/* =================== Player Header Internal Styles =================== */

// Main container for the entire header component area
.playerHeadshot {
  width: 100%;
  height: 100%;
  position: relative; // Establishes stacking context for ::before and children
  overflow: hidden;
  // Make the element itself transparent, background is handled by ::before
  background-color: transparent;
  z-index: 0;
}

// Container holding the left (logo/headshot) and right (SVG text) areas
// This sits above the ::before background
.headshotContainer {
  position: relative; // Positioned relative to playerHeadshot parent
  width: 100%;
  height: 100%;
  display: flex; // Arranges leftSide and rightSide
  z-index: 0; // <<< Sits above the ::before pseudo-element (z-index: 0)
}

// Container for the left 50% content
.leftSide {
  flex-basis: 55%;
  position: relative; // Context for logo & headshot absolute positioning
  display: flex; // Helps center content if needed, works with absolute children
  align-items: center;
  justify-content: center;
  background-color: transparent; // Ensure no conflicting background here
}

// Container for the team logo image (within leftSide)
.teamLogo {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%; // Fill leftSide
  height: 100%;
  z-index: 1; // <<< Bottom layer WITHIN leftSide
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.5; // 50% opacity for the logo

  // Styling for the actual logo <img> tag
  img {
    display: block;
    max-width: 100%; // Adjust size as desired
    max-height: 100%;
    width: auto;
    height: auto;
    object-fit: contain;
    filter: drop-shadow(3px 3px 0 var(--secondary-color))
      drop-shadow(-3px -3px 0 var(--secondary-color))
      drop-shadow(3px -3px 0 var(--secondary-color))
      drop-shadow(-3px 3px 0 var(--secondary-color));
  }

  span {
    // Targeting the span wrapper from next/legacy/image
    overflow: visible !important; // Allow filter drop-shadow to be visible
  }

  // Placeholder text if image fails
  p {
    color: #ccc;
    font-size: 14px;
    text-align: center;
  }
}

// Container for the player headshot image (within leftSide)
.headshot {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%; // Fill leftSide
  height: 100%;
  transform: translateY(10%);
  z-index: 2; // <<< Top layer WITHIN leftSide (appears over logo)
  display: flex;
  align-items: center;
  justify-content: center;

  // Targeting the span wrapper from next/legacy/image
  span {
    overflow: visible !important; // Allow filter drop-shadow to be visible
    width: 100% !important;
    height: 100% !important;
  }

  img {
    height: 90%;
    width: 90%;
  }
}

// Styling for the actual headshot <img> tag
.headshotImage {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover; // As specified in TSX

  // Apply the outline filter using drop-shadow
  filter: drop-shadow(3px 3px 0 var(--primary-color))
    drop-shadow(-3px 3px 0 var(--primary-color))
    drop-shadow(3px -3px 0 var(--primary-color))
    drop-shadow(-3px -3px 0 var(--primary-color))
    drop-shadow(3px 3px 0 var(--secondary-color))
    drop-shadow(-3px -3px 0 var(--secondary-color))
    drop-shadow(3px -3px 0 var(--secondary-color))
    drop-shadow(-3px 3px 0 var(--secondary-color)) drop-shadow(3px 3px 0 white)
    drop-shadow(-3px -3px 0 white) drop-shadow(3px -3px 0 white)
    drop-shadow(-3px 3px 0 white);
}

// Specific styling for the placeholder image to remove outline
img[alt*="Placeholder headshot"].headshotImage {
  object-fit: contain; // Adjust fit if needed
  opacity: 0.4;
  filter: none; // Remove outline from placeholder
}

// Container for the right 50% content
.rightSide {
  position: relative; // Context for the SVG if needed
  background-color: transparent; // Ensure transparent
  // No z-index needed here relative to leftSide
  // This div contains the TeamNameSVG component
}

// Styling for the <svg> element rendered by TeamNameSVG
.teamNameSVG {
  // Position it to fill the .rightSide container
  position: absolute; // Or relative if block layout is sufficient
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  // Ensure NO background color is applied to the SVG element itself
  background-color: transparent !important; // Use !important for certainty if needed

  opacity: 1; // Set opacity for the text (use 1 for fully opaque text)
  display: block;

  // Prevent the transparent SVG overlay from interfering with mouse events below
  pointer-events: none;

  // The text elements inside are styled by the TeamNameSVG component's logic
  // (fill, font-size, textLength, etc.)
}

/* =================== Table Styling (COUNTS / RATES / PER GAME) =================== */
// Base styles applied via mixin in component-specific rules below
@mixin stats-table-common {
  border-collapse: collapse; // for borders and sticky headers
  table-layout: fixed; // Important for performance and column control
  width: 100%; // Fill container width
  height: 100%; // Fill container height

  thead {
    position: sticky;
    top: 0;
    z-index: 2; // Above body
    background-color: v.$background-dark; // Ensure header bg doesn't become transparent

    tr th {
      background-color: v.$background-dark; // Inherit dark background
      color: v.$text-color-secondary;
      font-weight: 600;
      font-size: v.$font-size-small * 0.85;
      padding: v.$space-xs * 0.8 v.$space-sm * 0.8;
      border-bottom: 2px solid v.$secondary-color;
      border-right: v.$border-subtle;
      text-transform: uppercase;
      letter-spacing: 0.3px;
      white-space: nowrap; // Keep headers nowrap
      text-align: center; // Default center align

      &:first-child {
        // Style for Expander column header
        width: 5%; // Ensure width is applied
        padding: v.$space-xs * 0.8 4px; // Reduced padding
      }

      &:last-child {
        border-right: none;
      }
    }
  }

  tbody {
    tr {
      border-bottom: v.$border-subtle;
      transition: background-color v.$transition-duration v.$transition-easing;
      &:nth-child(even) {
        background-color: v.$background-light;
      }
      &:nth-child(odd) {
        background-color: v.$background-dark;
      }
      &:last-child {
        border-bottom: none;
      }
      &:hover {
        background-color: color.scale(v.$primary-color, $alpha: -70%);
      }
    }
    td {
      padding: v.$space-xs * 0.8 v.$space-sm * 0.8;
      font-size: v.$font-size-small * 0.8;
      border-right: v.$border-subtle;
      vertical-align: middle;
      white-space: nowrap;
      text-align: center; // Default center align data

      &:last-child {
        border-right: none;
      }
    }

    .expanderCell {
      // Target the TD specifically
      text-align: center;
      width: 5%; // Match header width
      border-right: v.$border-subtle; // Keep consistent border
      // Inherit background from row for striping/hover
      background-color: inherit;

      // Make Expander column sticky (along with Stat column)
      position: sticky;
      left: 0; // Stick to the far left
      z-index: 1; // Below header
    }

    button.expandButton {
      // Target the button inside the cell
      background: none;
      border: none;
      color: v.$primary-color;
      font-weight: 900;
      cursor: pointer;
      padding: 2px 5px;
      font-size: v.$font-size-base;
      margin: 0 auto;
      line-height: 1; // Ensure icon aligns well vertically

      &:hover {
        color: #fff;
      }
    }

    td:nth-child(2) {
      // Target the Stat Label TD (now the second child)
      text-align: left;
      padding-left: v.$space-sm;
      font-weight: 600;
      color: v.$text-color-secondary;
      border-right: v.$border-separator; // Match header separator
      // Make Stat column sticky (needs left offset due to expander)
      position: sticky;
      left: 5%; // Offset by the width of the expander column
      z-index: 1;
      background-color: inherit;
    }

    // Style the row containing the chart
    tr.chartRow {
      td.chartCell {
        // Target the single cell in the chart row
        border-bottom: 1px solid #555; // Separator line
        border-top: 1px solid #555; // Separator line
        background-color: #282c34; // Darker background for chart area
        padding: v.$space-sm !important; // Add padding *inside* the chart cell
      }
      // Ensure hover effect doesn't apply to chart row if desired
      &:hover {
        background-color: transparent; // Or match chartCell background
      }
    }
  }
}

// Styles for the table *inside* the Counts/Rates containers
.countsTableContainer .statsTableActual,
.ratesTableContainer .statsTableActual {
  // Target the nested table element
  @include stats-table-common;
  border: none !important;

  thead {
    // Adjust first child (Expander) and second child (Stat) headers
    th:first-child {
      // Expander Header
      text-align: center;
      padding: v.$space-xs * 0.8 4px;
      border-right: v.$border-subtle;
      position: sticky;
      left: 0; // Stick expander to far left
      z-index: 3;
      background-color: v.$background-dark;
    }
    th:nth-child(2) {
      // Stat Header
      text-align: left;
      padding-left: v.$space-sm;
      border-right: v.$border-separator; // Stronger separator
      position: sticky;
      left: 5%; // Offset Stat header
      z-index: 3;
      background-color: v.$background-dark;
    }

    // Title Rows (Counts/Rates Labels)
    tr.countsLabel th,
    tr.ratesLabel th {
      background-color: darken(v.$primary-color, 30%); // Keep custom title bg
      color: v.$text-color-primary;
      font-family: "roboto condensed", sans-serif;
      text-transform: uppercase;
      font-variant: small-caps;
      letter-spacing: 10px;
      font-size: v.$font-size-base * 0.85;
      text-align: center;
      padding: v.$space-xs * 0.8 0;
      border-bottom: 2px solid v.$border-color-primary;
      border-right: none; // Span full width
      // These are already sticky due to thead rule
    }
  }

  tbody {
    td {
      padding: v.$space-xs * 0.6 v.$space-sm * 0.6; // Keep existing padding
      font-size: v.$font-size-small; // Keep existing font-size
      font-weight: 100 !important;
      font-family: "roboto condensed", sans-serif;
      letter-spacing: -0.25px;
      border-right: v.$border-subtle;
      vertical-align: middle;
      white-space: nowrap;
      text-align: center; // Default center align data

      &:last-child {
        border-right: none;
      }
    }

    td:first-child {
      // Stat Name Cell
      text-align: left;
      font-weight: 600;
      color: v.$text-color-secondary;
      padding: 0;
      text-align: center;
      border-right: v.$border-separator; // Match header separator
      // Make first column sticky
      position: sticky;
      z-index: 1; // Below header
      // Inherit background color from row for striping/hover
      background-color: inherit;
    }
    // Data cells (CA, STD, L10 etc.) center aligned by default

    td:last-child {
      // DIFF Cell Style
      font-weight: bold;
      // Color applied inline based on value
    }
    // GP Row Highlight Style (assuming class is added in component)
    tr.gpRow {
      background-color: v.$background-medium !important; // Override striping
      color: v.$secondary-color;
      font-weight: bold;
      td {
        border-top: 1px solid v.$border-color-primary;
      }
    }
  }
}

// --- GameLogChart Internal Styles ---
.gameLogChartContainer {
  h4 {
    margin-top: 0;
    margin-bottom: 10px;
    text-align: center;
    color: #eee;
    font-size: 1.1em;
  }
  .averageToggleButtons {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 8px;
    margin-bottom: 15px;
  }

  .avgButton {
    background-color: #444;
    border: 1px solid #666;
    color: #ccc;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8em;
    transition: background-color 0.2s ease, border-color 0.2s ease,
      color 0.2s ease; // Added color transition

    &:hover {
      background-color: #555;
      border-color: #888;
    }

    &.active {
      background-color: v.$primary-color;
      border-color: darken(v.$primary-color, 15%);
      color: white;
      font-weight: bold;
    }
  }
}

.chartStatus {
  // For Loading/Error/No Data within the chart cell
  padding: 20px;
  text-align: center;
  color: #aaa;
  font-style: italic;
  background-color: #282c34; // Match chart background
}

// Style for Recharts Tooltip
.chartTooltip {
  background-color: rgba(40, 44, 52, 0.9);
  border: 1px solid #666;
  padding: 10px;
  border-radius: 4px;
  color: #eee;
  font-size: 0.9em;
  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);

  p {
    margin: 3px 0;
  }
}

.ratesTable,
.countsTable {
  height: 100%; // Fill container height
}

// --- Per Game Stats Table Styling ---
.perGameStatsContainer {
  // Container handles scroll
  overflow: auto;
  padding: v.$space-xs; // Add small padding for scrollbar spacing

  // Scrollbar styling (keep from original)
  &::-webkit-scrollbar {
    height: 4px;
  }
  &::-webkit-scrollbar-thumb {
    background-color: v.$primary-color;
    border-radius: 2px;
  }
  &::-webkit-scrollbar-track {
    background-color: v.$background-medium;
  }
  scrollbar-width: thin;
  scrollbar-color: v.$primary-color v.$background-medium;

  table.transposedTable {
    @include stats-table-common; // Apply common styles
    height: auto; // Height determined by content since container scrolls

    thead th {
      // Header cells (Stat, CA, STD, L10 etc.) are center aligned by default
      font-size: v.$font-size-small * 0.8; // Slightly smaller again?
      padding: v.$space-xs * 0.8; // Compact padding
    }

    tbody {
      td {
        font-size: v.$font-size-small * 0.85; // Match counts/rates data font
        padding: v.$space-xs * 0.8; // Compact padding
      }
      td:first-child {
        // Stat Name Column
        text-align: left;
        padding-left: v.$space-sm;
        font-weight: 600;
        color: v.$text-color-secondary;
        border-right: v.$border-separator;
        // Width should be controlled by <colgroup>
        // Make first column sticky
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: inherit; // Inherit row background
      }
      // GP Row Highlight (assuming class is added in component)
      tr.gpRowHighlight {
        // Use specific class if different from counts/rates
        background-color: v.$background-medium !important; // Override striping
        color: v.$secondary-color; // Use theme accent
        font-weight: bold;
      }
    }
  }

  // Loading/Error Message Styling (reuse if applicable)
  .loadingMessage,
  .errorMessage,
  .noDataMessage,
  .noPlayerMessage {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    width: 100%;
    min-height: 100px; // Give it some minimum height
    font-size: 1em;
    padding: v.$space-md;
    color: v.$text-color-secondary;
  }
  .errorMessage {
    color: #ff6b6b;
  } // Error color
  .noDataMessage,
  .noPlayerMessage {
    color: #aaa;
  } // Subtle color
}

/* =================== Chart Container Styling =================== */
.chartContainer {
  height: 100%; // Fill container height
  display: flex; // Added for flex structure (header + canvas)
  flex-direction: column; // Stack header and canvas vertically
}

.chartHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 6px 10px;
  background-color: rgb(
    6,
    47,
    61
  ); // Or use a variable: darken(v.$background-dark, 5%);
  flex-shrink: 0; // Prevent header from shrinking

  // Title style within the header
  h3 {
    margin: 0;
    font-size: 12px;
    font-weight: 700;
    color: #ccc; // Or v.$text-color-secondary;
    // Add padding adjustment if needed to match previous inline style vertical alignment exactly
    padding: 3px 0 3.5px 0;
    text-transform: uppercase;
    letter-spacing: 2px;
  }

  // Container for toggle buttons
  // .toggleButtons {
  //   // Buttons align automatically due to justify-content: space-between
  // }

  // Style for the toggle buttons themselves
  button {
    // Base button styles from inline
    padding: 3px 5px;
    font-size: 10px;
    cursor: pointer;
    color: v.$text-color-secondary;
    background-color: darken(v.$background-medium, 10%);
    border: v.$border-color;
    border-radius: v.$border-radius-sm; // Add slight rounding
    margin-left: 5px; // Use margin-left instead of margin-right on the first button
    transition: background-color 0.2s ease, border-color 0.2s ease;

    &:first-child {
      margin-left: 0; // No left margin on the very first button
    }

    &:hover:not(:disabled) {
      background-color: #444; // Slightly lighter on hover
      border-color: #777;
      outline: 1px solid v.$border-color;
    }

    // Disabled state styles
    &:disabled {
      cursor: crosshair;
      background-color: v.$primary-color;
      // color: #aaa; // Optionally change text color too

      &:hover {
        background-color: v.$primary-color; // Keep same color on hover
        outline: 1px solid v.$warning-color;
        border-color: v.$primary-color; // Keep same border color on hover
      }
    }
  }
}

.chartCanvasContainer {
  position: relative;
  width: 100%;
  // height: 90%; // Let flex-grow handle height instead
  flex-grow: 1; // Allow canvas container to fill remaining space
  overflow: hidden;
  padding: v.$space-xs;
  box-sizing: border-box;
}

// Placeholder for loading charts
.chartLoadingPlaceholder {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%; // Fill space
  min-height: 100px; // Ensure visible height
  color: v.$text-color-secondary;
  font-size: v.$font-size-small;
  flex-grow: 1; // Take space if chart isn't loaded
}

////////////////////////////////////////////////////////////////////////////
/* --- Rate Stat Percentiles Component Styles --- */

// Overall component container
.rateStatPercentilesComponent {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  overflow: hidden;
  background-color: v.$background-dark;
}

// Wrapper for Filters + Chart/Ranks Area (Row layout)
.mainContentWrapper {
  display: flex;
  flex-direction: row;
  flex-grow: 1;
  width: 100%;
  overflow: hidden;
}

// Filters Container (Left column)
.percentileFiltersContainer {
  display: flex;
  flex-direction: column; // Title, Controls Wrapper, Threshold vertically
  gap: v.$space-xs; // Gap between Title, Controls, Threshold
  flex-shrink: 0;
  flex-basis: 150px; // Increased width to accommodate side-by-side controls
  padding: v.$space-xs;
  box-sizing: border-box;
  border-right: 1px solid v.$border-color-secondary;
  align-items: stretch; // Stretch children horizontally
  // Removed overflow-y: auto; - manage overflow within controls if needed
  height: 100%;
  background-color: darken(v.$background-dark, 2%);
}

.filtersTitle {
  font-size: v.$font-size-small * 0.9;
  color: v.$text-color-primary;
  font-weight: 600;
  text-transform: uppercase;
  margin-bottom: 0; // Reduced margin
  margin-block-start: 0;
  padding-bottom: v.$space-xs;
  border-bottom: 1px solid v.$border-color-primary;
  text-align: center;
  flex-shrink: 0; // Prevent title from shrinking
}

// --- NEW Wrapper for side-by-side controls ---
.filterControlsWrapper {
  display: flex;
  flex-direction: row; // Strength Selector | GP Slider
  gap: v.$space-lg; // Gap between the two columns
  flex-grow: 1; // Allow this wrapper to take available vertical space
  width: 100%;
  align-items: flex-start; // Align columns to the top
  overflow: hidden; // Hide overflow within this section
  min-height: 150px; // Ensure minimum height for vertical slider
}

// Strength Selector (Left side of wrapper)
.strengthSelector {
  display: flex;
  flex-direction: column;
  align-items: center; // Center items horizontally
  justify-content: space-between; // Center items vertically
  gap: v.$space-sm;
  flex: 2; // Take roughly half the space
  min-width: 0; // Prevent overflow
  padding: v.$space-xs 0 v.$space-md v.$space-lg;
  height: 100%; // Fill available height

  button {
    @include v.button-style;
    padding: v.$space-xs v.$space-sm;
    font-size: v.$font-size-small * 0.85;
    background-color: v.$background-medium;
    border: 1px solid v.$border-color-primary;
    color: v.$text-color-secondary;
    width: 100%;
    text-align: center;

    &.active {
      background-color: v.$primary-color;
      color: v.$text-color-primary;
      border-color: v.$primary-color;
      font-weight: bold;
    }
    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
  }
}

// GP Slider Container (Right side of wrapper - Vertical layout inside)
.gpSliderContainer {
  display: flex;
  flex-direction: column; // Stack Label, Max, Slider, Min vertically
  align-items: center; // Center items horizontally within this column
  gap: v.$space-xs;
  color: v.$text-color-secondary;
  font-size: v.$font-size-small;
  flex: 0 0 50px; // Give slider column a fixed width (adjust as needed)
  height: 100%; // Try to take full height of wrapper
  padding-bottom: v.$space-md; // Add space at the bottom for threshold messages
  padding-right: v.$space-sm;

  label {
    white-space: nowrap;
    font-size: v.$font-size-small * 0.8;
    font-weight: bold;
    margin-bottom: v.$space-xs;
    text-align: center;
    width: 100%;

    .minGpValue {
      color: v.$primary-color;
      padding-left: v.$space-xs;
    }
  }

  input {
    width: 50%; // Ensure input fills the container
    height: 50%; // Ensure input fills the container
  }

  // --- Vertical Slider ---
  .gpSlider {
    // Make it vertical (check browser compatibility - may need prefixes or transform fallback)
    appearance: slider-vertical;
    -webkit-appearance: slider-vertical;
    writing-mode: bt-lr; // Fallback / alternative for some browsers

    width: 8px; // Define width for vertical slider
    flex-grow: 1; // Allow slider to grow vertically

    cursor: pointer;
    accent-color: v.$primary-color; // Color the track fill
    margin: 0; // Reset margins
    padding: 0;

    &:disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }

    // Optional: Style track and thumb for vertical slider
    // These might need browser-specific prefixes (-webkit-, -moz-)
    &::-webkit-slider-runnable-track {
      background: v.$background-medium;
      border-radius: 3px;
      height: 100%; // Ensure track fills height
    }
    &::-moz-range-track {
      background: v.$background-medium;
      border-radius: 3px;
      height: 100%;
    }
    &::-webkit-slider-thumb {
      appearance: none; // Needed for custom styling
      -webkit-appearance: none;
      height: 16px; // Thumb size
      width: 16px;
      background: v.$primary-color;
      border-radius: 50%;
      cursor: pointer;
      margin-top: -4px; // Adjust thumb position relative to track if needed
    }
    &::-moz-range-thumb {
      height: 16px;
      width: 16px;
      background: v.$primary-color;
      border-radius: 50%;
      border: none; // Remove default border
      cursor: pointer;
    }
  }

  // Labels for min/max values on the slider
  .gpSliderMaxLabel,
  .gpSliderMinLabel {
    font-size: v.$font-size-small;
    color: v.$primary-color;
    width: 100%;
    text-align: center;
  }
  .gpSliderMaxLabel {
    order: 0;
  } // Position Max label logically above slider in flex column
  .gpSliderMinLabel {
    order: 1;
  } // Position Min label logically below slider
}

// --- Container for Threshold messages (at the bottom) ---
.thresholdMessagesContainer {
  margin-top: auto; // Push this container to the bottom
  padding-top: v.$space-sm; // Add space above messages
  flex-shrink: 0; // Prevent shrinking
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: v.$space-xs;
}

// Threshold Message Style
.thresholdMessage {
  color: v.$warning-color; // Using warning color variable
  font-size: v.$font-size-small * 0.9;
  padding: v.$space-xs;
  background-color: rgba(v.$warning-color, 0.1);
  border: 1px solid rgba(v.$warning-color, 0.3);
  border-radius: v.$border-radius-sm;
  text-align: left;
  width: 100%; // Take full width of its container
}

// --- Chart + Ranks Area (Right Column content) ---
.chartAndRanksArea {
  padding: v.$space-md;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  width: 100%;
  min-width: 0;
  height: 100%;
  overflow: hidden;
}

// Chart Container
.percentileChartsContainer {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  width: 100%;
  min-height: 150px;
  position: relative;
  overflow: hidden;
  box-sizing: border-box;
  > canvas,
  > div {
    /* Ensure canvas fills */
    width: 100% !important;
    height: 100% !important;
    position: relative;
  }
}

// Chart Placeholder
.chartLoadingPlaceholder {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  min-height: 100px;
  color: v.$text-color-secondary;
  font-size: v.$font-size-small;
}
