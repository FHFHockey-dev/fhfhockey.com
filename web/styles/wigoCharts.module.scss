/* /styles/wigoCharts.module.scss */
@use "sass:color";
@use "styles/vars" as v; // Import variables from vars.scss
@use "sass:math";
@import url("https://fonts.googleapis.com/css2?family=Train+One&family=Zen+Tokyo+Zoo&display=swap");

/* =================== Main Dashboard Layout =================== */

.wigoDashboardContainer {
  @include v.component-wrapper;
  width: 90%;
  max-width: 2000px;
  height: 87vh;
  margin: v.$space-xl auto;
  display: flex;
  border-collapse: collapse;
  border: 2px solid v.$border-color;
}

.wigoDashboardContent {
  flex-grow: 1;
  background-color: v.$background-dark;
  border-radius: v.$border-radius;
  overflow: hidden;

  // --- Grid Definition ---
  display: grid;
  grid-template-columns: repeat(36, 1fr);
  grid-template-rows: repeat(38, 1fr);
  padding: v.$space-xs;
}

/* =================== Base Styles for Grid Items (Applied Selectively) =================== */

// Mixin for common internal flex setup
@mixin internal-flex-column {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%; // Allow items to fill their grid area
  overflow: hidden;
}

/* =================== Specific Container Styles =================== */

/* --- Top Row --- */
.nameSearchBarContainer {
  // --- Does NOT use component-wrapper ---
  grid-area: 1 / 1 / 3 / 10;
  background-color: v.$background-dark;
  border-bottom: 3px solid #404040;
  border-top-left-radius: v.$border-radius-sm v.$border-radius-sm 0 0;
  padding: 0;
  overflow: visible !important; // MUST override for dropdown
  // Internal layout
  display: flex;
  align-items: center;
  justify-content: space-between;
  > div {
    // Target the actual NameSearchBar component inside
    width: 100%;
    height: 100%;
  }
}

.timeframeComparisonWrapper {
  // --- Uses component-wrapper (or custom equivalent) ---
  grid-area: 1 / 10 / 3 / 28;
  background-color: v.$background-dark; // Match search bg?
  border-bottom: 2px solid v.$border-color-primary;
  display: flex;
  align-items: center; // Vertically center content
  overflow: hidden;
  > div {
    // Target the actual TimeframeComparison component
    width: 100%;
    height: 100%;
  }
}

// --- Grid Area Definition ---
.consistencyRatingContainer {
  grid-area: 1 / 28 / 12 / 37; // Example: Top right area
  border: 1px solid #555;
  border-left: none;
  background-color: v.$background-dark;
  overflow: hidden; // Important
  border-top-right-radius: v.$border-radius-sm;

  // Apply shared container styles
  .chartContainer {
    display: grid;
    grid-template-rows: auto 1fr; // Title auto, content takes rest
    height: 100%;
    width: 100%;

    .chartTitle {
      @extend .ratesLabel; // Inherit base title style
      background-color: darken(v.$primary-color, 32%);
      padding: 6px 0;
      display: flex;
      justify-content: center;
      align-items: center;
      border-bottom: 1px solid #444;
      text-transform: uppercase;
      height: 47.5px;

      h3 {
        margin: 0;
        font-size: 12px;
        font-weight: 600;
        letter-spacing: 10px;
        font-family: "Lucida Sans", "Lucida Grande" sans-serif;
      }
    }

    // --- New styles for Consistency Layout ---
    .consistencyContent {
      display: flex; // Arrange chart and list side-by-side
      height: 100%;
      width: 100%;
      padding: v.$space-md;
      box-sizing: border-box;
      gap: 10px; // Space between chart and list
      overflow: hidden; // Prevent internal scrollbars if possible
    }

    .consistencyChartArea {
      flex: 1 1 65%; // Let chart take slightly more space, allow shrinking
      position: relative; // Needed for chart.js canvas responsiveness
      min-width: 100px; // Prevent collapsing too small
    }

    .consistencyListArea {
      flex: 1 1 35%; // Let list take remaining space
      overflow-y: auto; // Allow scrolling if list is long
      font-size: 11px;
      padding-right: 5px; // Padding on the right of the list
      display: flex;
      flex-direction: column; // Stack items vertically
      justify-content: center;
      align-items: center; // Align items to the left

      ul {
        list-style: none;
        padding: 0;
        margin: 0;
        height: 100%;
        display: flex;
        flex-direction: column; // Stack items vertically
        justify-content: space-evenly;
        align-items: flex-start; // Center items
      }
    }

    .consistencyItem {
      display: flex;
      // <<< Add align-items for vertical centering >>>
      align-items: center;
      padding: 3px 0;
      border-bottom: 1px solid #3a3a3a;

      &:last-child {
        border-bottom: none;
      }
    }

    // --- Style for the Color Swatch ---
    .consistencyColorSwatch {
      display: inline-block; // Allow setting width/height/margins
      width: 10px; // Adjust size as needed
      height: 10px; // Adjust size as needed
      border-radius: 50%; // Make it a circle (optional)
      margin-right: 8px; // Space between swatch and label
      flex-shrink: 0; // Prevent swatch from shrinking
      background-color: #555; // Default/fallback color (for Cardio or items without color)
      border: 1px solid #777; // Optional subtle border
    }

    .consistencyLabel {
      color: #ccc;
      margin-right: 10px;
      white-space: nowrap; // Prevent wrapping
    }

    .consistencyValue {
      color: #fff;
      font-weight: bold;
      margin-left: auto;
      padding-left: 10px;
    }

    .consistencyCount {
      color: #888;
      font-size: 10px;
      margin-left: 5px;
      white-space: nowrap; // Prevent wrapping
    }

    // --- End Consistency Specific Styles ---

    // General placeholders (can be reused)
    .chartLoadingPlaceholder,
    .chartErrorPlaceholder {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100%;
      width: 100%;
      color: #aaa;
      font-size: 12px;
      text-align: center;
      padding: 10px;
      box-sizing: border-box;
    }
    .chartErrorPlaceholder {
      color: #ff6b6b;
    }
  } // End .chartContainer
} // End .consistencyRatingContainer

/* --- Left Column --- */
.playerHeaderContainer {
  // --- Does NOT use component-wrapper (custom look) ---
  grid-area: 3 / 1 / 11 / 10;

  position: relative; // Keep for SVG positioning
  z-index: 1; // Below search
  padding: 0;
  border-bottom: 2px solid v.$border-color;
  background-color: var(--secondary-color); // Use CSS var for dynamic color
  overflow: hidden;
  // PlayerHeader component should handle internal layout
}

.percentileChartContainer {
  // --- Uses component-wrapper ---
  grid-area: 11 / 1 / 21 / 6;
  @include internal-flex-column; // Use mixin for internal chart layout (title + canvas)
  padding: 0; // Remove padding, handled by internal elements (.chartTitle, .chartCanvasContainer)
}

// .paceTableContainer {
//   // --- Uses component-wrapper ---
//   grid-area: 11 / 7 / 20 / 10;
//   @include internal-flex-column;
//   border: 1px solid v.$secondary-color;
//   // Center placeholder text
//   align-items: center;
//   justify-content: center;
//   padding: v.$space-md; // Add padding for placeholder text
//   // Placeholder styles
//   color: v.$text-color-secondary;
//   font-style: italic;
//   font-size: v.$font-size-small;
//   text-align: center;
// }

.rateStatBarPercentilesContainer {
  // --- Uses component-wrapper ---
  grid-area: 21 / 19 / 30 / 37;
  @include internal-flex-column;
  border: 2px solid v.$border-color-secondary;
  // Center placeholder text
  align-items: center;
  justify-content: center;
  // Placeholder styles
  color: v.$text-color-secondary;
  font-style: italic;
  font-size: v.$font-size-small;
  text-align: center;
}

/* --- Center Columns (Tables) --- */
.countsTableContainer {
  // --- Uses component-wrapper (provides frame, overflow is auto) ---
  grid-area: 3 / 10 / 30 / 19;
  @include internal-flex-column; // Use mixin
  // Override specific wrapper styles
  padding: 0; // Table handles internal padding
  border-left: 2px solid v.$border-color-secondary; // Add right border for separation
  border-right: 2px solid v.$border-color; // Add right border for separation

  background-color: v.$background-dark; // Ensure bg matches theme
  overflow: auto; // Allow table scrolling
}

.ratesTableContainer {
  // --- Uses component-wrapper ---
  grid-area: 3 / 19 / 21 / 28;
  @include internal-flex-column;
  // Override specific wrapper styles

  border-right: 2px solid v.$border-color-secondary; // Add right border for separation
  padding: 0;
  background-color: v.$background-dark;
  overflow: auto;
}

.perGameStatsContainer {
  // --- Uses component-wrapper ---
  grid-area: 11 / 6 / 21 / 10;
  @include internal-flex-column;
  border-left: 2px solid v.$border-color;
  padding: 0 !important; // Let table inside handle padding/scrollbars
  overflow: hidden; // Container hides overflow, table handles scroll
  // Styles for table *inside* are below (.transposedTable)
}

/* --- Right Column --- */

.ratingsContainer {
  // --- Container for the 3 ratings - Does NOT use component-wrapper ---
  grid-area: 12 / 28 / 21 / 37;
  display: grid; // Keep using grid for precise placement relative to main grid
  // Replicate columns 28-36 -> 9 columns total
  grid-template-columns: repeat(9, 1fr);
  grid-template-rows: 1fr; // Single row
  gap: v.$space-sm; // Gap between rating boxes
  padding: 0;
  border: none;
  background: none; // Transparent wrapper
  overflow: hidden;

  // Style the individual rating boxes *within* this container
  > div {
    // Apply wrapper to inner boxes
    @include internal-flex-column;
    border-right: 1px solid v.$secondary-color; // Example border
    // Center placeholder text
    align-items: center;
    justify-content: center;
    // Placeholder styles
    color: v.$text-color-secondary;
    font-style: italic;
    font-size: v.$font-size-small;
    text-align: center;

    &:last-child {
      border-right: none; // Remove right border from last box
    }
  }

  // Place the individual rating boxes using grid columns relative to this container
  .offenseRatingsContainer {
    grid-column: 1 / 4; // Spans first 3 columns (equiv. 28, 29, 30)
  }
  .overallRatingsContainer {
    grid-column: 4 / 7; // Spans middle 3 columns (equiv. 31, 32, 33)
  }
  .defenseRatingsContainer {
    grid-column: 7 / 10; // Spans last 3 columns (equiv. 34, 35, 36)
  }
}

.opponentLogContainer {
  // --- Uses component-wrapper ---
  grid-area: 21 / 1 / 30 / 10;

  @include internal-flex-column;
  border-top: 2px solid v.$border-color-secondary;
  // Center placeholder text
  align-items: center;
  justify-content: center;
  padding: v.$space-md;
  // Placeholder styles
  color: v.$text-color-secondary;
  font-style: italic;
  font-size: v.$font-size-small;
  text-align: center;
}

/* --- Bottom Row (Charts) --- */
.toiChartContainer,
.ppgChartContainer,
.gameScoreContainer {
  // --- All use component-wrapper ---
  @include internal-flex-column; // Use mixin for internal chart layout (title + canvas)
  border-right: 2px solid v.$border-color;
  border-top: 2px solid v.$border-color;
  padding: 0; // Remove padding, handled by internal elements
}
// Assign grid areas
.toiChartContainer {
  grid-area: 30 / 1 / 39 / 13;
}
.ppgChartContainer {
  grid-area: 30 / 13 / 39 / 25;
}
.gameScoreContainer {
  grid-area: 30 / 25 / 39 / 37;
  border-right: none; // Remove right border from last chart
}

/* =================== Player Header Internal Styles =================== */
// These styles apply *within* the .playerHeaderContainer
// Keep these largely as they were, ensuring they work within the container size
.playerHeadshot {
  width: 100%;
  height: 100%;
  position: relative;
  background-color: transparent; // Ensure container bg shows through if needed

  .teamNameSVG {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    width: 100%;
    height: 100%;
    background-color: var(--primary-color); // Use CSS var
    opacity: 0.9; // Adjust opacity for visibility
    display: block;
  }
  .headshotContainer {
    position: relative;
    z-index: 1;
    width: 100%;
    height: 100%;
    display: flex;
  }

  // Ensure sizes use percentages or are constrained by container if needed
  .leftSide {
    flex-basis: 50%;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .headshot {
    position: relative; // Keep relative for potential adjustments
    width: 110%; // Example: Use percentage for responsiveness
    height: 110%; // Example: Use percentage
    span {
      overflow: visible !important; // Override any internal styles
    }
    transform: translateY(10%); // Re-evaluate if needed
  }
  .headshotImage {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
    filter: drop-shadow(1px 1px 5px rgba(0, 0, 0));
    overflow: visible !important; // Override any internal styles
  }
  img[alt*="Placeholder"] {
    outline: 3px solid v.$border-color-primary;
    border-radius: 50%;
  }
  .rightSide {
    flex-basis: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    padding-right: v.$space-xs;
  }
  .teamLogo {
    span {
      overflow: visible !important;
    }

    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    filter: drop-shadow(1px 1px 2px rgba(255, 255, 255, 0.2));

    img {
      display: block;
      max-width: 100%;
      max-height: 100%;
      width: auto;
      height: auto;
      object-fit: contain;
      // Consider simplifying complex filter if performance is an issue
      filter: drop-shadow(2px 2px 0 white) drop-shadow(-2px 2px 0 white)
        drop-shadow(2px -2px 0 white) drop-shadow(-2px -2px 0 white);
    }
  }
}

/* =================== Table Styling (COUNTS / RATES / PER GAME) =================== */
// Base styles applied via mixin in component-specific rules below
@mixin stats-table-common {
  border-collapse: collapse; // for borders and sticky headers
  table-layout: fixed; // Important for performance and column control
  width: 100%; // Fill container width
  height: 100%; // Fill container height

  thead {
    position: sticky;
    top: 0;
    z-index: 2; // Above body
    background-color: v.$background-dark; // Ensure header bg doesn't become transparent

    tr th {
      background-color: v.$background-dark; // Inherit dark background
      color: v.$text-color-secondary;
      font-weight: 600;
      font-size: v.$font-size-small * 0.85;
      padding: v.$space-xs * 0.8 v.$space-sm * 0.8;
      border-bottom: 2px solid v.$secondary-color;
      border-right: v.$border-subtle;
      text-transform: uppercase;
      letter-spacing: 0.3px;
      white-space: nowrap; // Keep headers nowrap
      text-align: center; // Default center align

      &:last-child {
        border-right: none;
      }
    }
  }

  tbody {
    tr {
      border-bottom: v.$border-subtle;
      transition: background-color v.$transition-duration v.$transition-easing;
      &:nth-child(even) {
        background-color: v.$background-light;
      }
      &:nth-child(odd) {
        background-color: v.$background-dark;
      }
      &:last-child {
        border-bottom: none;
      }
      &:hover {
        background-color: color.scale(v.$primary-color, $alpha: -70%);
      }
    }
    td {
      padding: v.$space-xs * 0.8 v.$space-sm * 0.8;
      font-size: v.$font-size-small * 0.85;
      border-right: v.$border-subtle;
      vertical-align: middle;
      white-space: nowrap;
      text-align: center; // Default center align data

      &:last-child {
        border-right: none;
      }
    }
  }
}

// Styles for the table *inside* the Counts/Rates containers
.countsTableContainer .statsTableActual,
.ratesTableContainer .statsTableActual {
  @include stats-table-common; // Apply common styles
  border: none !important; // Override any default borders

  // Specifics for Counts/Rates Tables
  thead {
    th:first-child {
      // Stat Header
      text-align: left;
      padding-left: v.$space-sm;
      border-right: v.$border-separator; // Stronger separator
      // Width should be controlled by <colgroup> in the HTML/Component
      position: sticky; // Make first column sticky
      left: 0;
      z-index: 3; // Above other headers
      background-color: v.$background-dark; // Ensure background for sticky
    }
    // Header cells for CA, STD, L10 etc (center aligned by default)

    // Title Rows (Counts/Rates Labels)
    tr.countsLabel th,
    tr.ratesLabel th {
      background-color: darken(v.$primary-color, 30%); // Keep custom title bg
      color: v.$text-color-primary;
      font-family: "roboto condensed", sans-serif;
      font-weight: 900;
      text-transform: uppercase;
      font-variant: small-caps;
      letter-spacing: 10px;
      font-size: v.$font-size-base * 0.85;
      text-align: center;
      padding: v.$space-xs * 0.8 0;
      border-bottom: 2px solid v.$border-color-primary;
      border-right: none; // Span full width
      // These are already sticky due to thead rule
    }
  }

  tbody {
    td {
      padding: v.$space-xs * 0.7 v.$space-sm * 0.7; // Keep existing padding
      font-size: v.$font-size-small * 0.85; // Keep existing font-size
      font-family: "roboto condensed", sans-serif;
      border-right: v.$border-subtle;
      vertical-align: middle;
      white-space: nowrap;
      text-align: center; // Default center align data

      &:last-child {
        border-right: none;
      }
    }

    td:first-child {
      // Stat Name Cell
      text-align: left;
      padding-left: v.$space-sm;
      font-weight: 600;
      color: v.$text-color-secondary;
      border-right: v.$border-separator; // Match header separator
      // Make first column sticky
      position: sticky;
      left: 0;
      z-index: 1; // Below header
      // Inherit background color from row for striping/hover
      background-color: inherit;
    }
    // Data cells (CA, STD, L10 etc.) center aligned by default

    td:last-child {
      // DIFF Cell Style
      font-weight: bold;
      // Color applied inline based on value
    }
    // GP Row Highlight Style (assuming class is added in component)
    tr.gpRow {
      background-color: v.$background-medium !important; // Override striping
      color: v.$secondary-color;
      font-weight: bold;
      td {
        border-top: 1px solid v.$border-color-primary;
      }
    }
  }
}

.ratesTable,
.countsTable {
  height: 100%; // Fill container height
}

// --- Per Game Stats Table Styling ---
// Styles for the table *inside* the .perGameStatsContainer
// ASSUMPTION: The <table> element inside PerGameStatsTable component has class="transposedTable"
.perGameStatsContainer {
  // Container handles scroll
  overflow: auto;
  padding: v.$space-xs; // Add small padding for scrollbar spacing

  // Scrollbar styling (keep from original)
  &::-webkit-scrollbar {
    height: 4px;
  }
  &::-webkit-scrollbar-thumb {
    background-color: v.$primary-color;
    border-radius: 2px;
  }
  &::-webkit-scrollbar-track {
    background-color: v.$background-medium;
  }
  scrollbar-width: thin;
  scrollbar-color: v.$primary-color v.$background-medium;

  table.transposedTable {
    @include stats-table-common; // Apply common styles
    height: auto; // Height determined by content since container scrolls

    thead th {
      // Header cells (Stat, CA, STD, L10 etc.) are center aligned by default
      font-size: v.$font-size-small * 0.8; // Slightly smaller again?
      padding: v.$space-xs * 0.8; // Compact padding
    }

    tbody {
      td {
        font-size: v.$font-size-small * 0.85; // Match counts/rates data font
        padding: v.$space-xs * 0.8; // Compact padding
      }
      td:first-child {
        // Stat Name Column
        text-align: left;
        padding-left: v.$space-sm;
        font-weight: 600;
        color: v.$text-color-secondary;
        border-right: v.$border-separator;
        // Width should be controlled by <colgroup>
        // Make first column sticky
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: inherit; // Inherit row background
      }
      // GP Row Highlight (assuming class is added in component)
      tr.gpRowHighlight {
        // Use specific class if different from counts/rates
        background-color: v.$background-medium !important; // Override striping
        color: v.$secondary-color; // Use theme accent
        font-weight: bold;
      }
    }
  }

  // Loading/Error Message Styling (reuse if applicable)
  .loadingMessage,
  .errorMessage,
  .noDataMessage,
  .noPlayerMessage {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    width: 100%;
    min-height: 100px; // Give it some minimum height
    font-size: 1em;
    padding: v.$space-md;
    color: v.$text-color-secondary;
  }
  .errorMessage {
    color: #ff6b6b;
  } // Error color
  .noDataMessage,
  .noPlayerMessage {
    color: #aaa;
  } // Subtle color
}

/* =================== Chart Container Styling =================== */
.chartContainer {
  height: 100%; // Fill container height
}

.chartCanvasContainer {
  // Shared style for the chart canvas wrapper
  position: relative; // Critical for chart.js responsiveness
  width: 100%;
  height: 90%; // Fill space
  overflow: hidden; // Prevent canvas overflow spilling out
  padding: v.$space-sm; // Small padding *around* the canvas within its container
  box-sizing: border-box;
  // Canvas element itself should be width/height 100% managed by chart.js
}

// Placeholder for loading charts
.chartLoadingPlaceholder {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%; // Fill space
  min-height: 100px; // Ensure visible height
  color: v.$text-color-secondary;
  font-size: v.$font-size-small;
  flex-grow: 1; // Take space if chart isn't loaded
}

////////////////////////////////////////////////////////////////////////////
/* --- Rate Stat Percentiles Component Styles --- */
.rateStatPercentilesComponent {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  padding: v.$space-sm;
  box-sizing: border-box;
  overflow: hidden;
  gap: v.$space-sm;
  background-color: v.$background-dark;
}

// Container for Filters (Side-by-side)
.percentileFiltersContainer {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: v.$space-lg;
  flex-shrink: 0;
  width: 100%;
}

.strengthSelector {
  display: flex;
  justify-content: flex-start; // Align buttons to the start
  gap: v.$space-xs;
  flex-shrink: 0;

  button {
    @include v.button-style;
    padding: v.$space-xs v.$space-sm;
    font-size: v.$font-size-small * 0.75; // Smaller buttons
    background-color: v.$background-medium;
    border: 1px solid v.$border-color-primary;
    color: v.$text-color-secondary;

    &.active {
      background-color: v.$primary-color;
      color: v.$text-color-primary;
      border-color: v.$border-color;
      font-weight: bold;
    }
    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
  }
}

.gpSliderContainer {
  display: flex;
  align-items: center;
  gap: v.$space-sm;
  color: v.$text-color-secondary;
  font-size: v.$font-size-small;
  flex-grow: 1; // Allow slider container to take remaining space
  min-width: 150px; // Ensure slider has some minimum width

  label {
    white-space: nowrap;
    flex-shrink: 0;
  }
  .gpSlider {
    flex-grow: 1;
    cursor: pointer;
    accent-color: v.$primary-color;
    &:disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }
  }
  span {
    min-width: 20px;
    text-align: right;
    font-weight: bold;
  }
}

// Loading/Error/Message Styles (Keep previous definitions)
.loadingMessage,
.errorMessage,
.noDataMessage,
.noPlayerMessage,
.thresholdMessage {
  // ... (keep existing styles: text-align, padding, color, font-size, flex-grow, display, align-items, justify-content)
  flex-grow: 1; // Ensure messages take up space below filters if charts aren't shown
  min-height: 100px; // Give messages some vertical space
  color: v.$text-color-secondary;
  font-size: v.$font-size-small;
  text-align: center;
  padding: v.$space-md;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
}
.errorMessage {
  color: #ff6b6b;
}
.thresholdMessage {
  color: #f0ad4e;
}

// Container for Charts (Side-by-side)
.percentileChartsContainer {
  display: flex;
  flex-direction: row;
  flex-grow: 1;
  gap: v.$space-xs;
  width: 100%;
  overflow: hidden;
  min-height: 150px; // Ensure charts have some minimum height
}

.rateChartJsContainer {
  flex-basis: 65%;
  min-width: 0; // Prevent flex items from overflowing
  position: relative; // Needed for Chart.js canvas responsiveness
  height: 100%; // Ensure container takes full available height
}

.percentageChartJsContainer {
  flex-basis: 35%; // Adjusted to take less space
  min-width: 0; // Prevent flex items from overflowing
  position: relative; // Needed for Chart.js canvas responsiveness
  height: 100%; // Ensure container takes full available height
}
